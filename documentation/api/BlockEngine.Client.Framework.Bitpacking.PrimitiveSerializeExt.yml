### YamlMime:ManagedReference
items:
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  commentId: T:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  id: PrimitiveSerializeExt
  parent: BlockEngine.Client.Framework.Bitpacking
  children:
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.Byte,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.Byte,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt16,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt32,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt64,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt64,System.Int32,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt64,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ExtractFloat(System.UInt64,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.Byte@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.UInt16@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.UInt32@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.UInt64@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Boolean,System.Byte@,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Boolean,System.UInt16@,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Boolean,System.UInt32@,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Boolean,System.UInt64@,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.Byte@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.Byte@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt16@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt16@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt32@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt32@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt64@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt64@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Single,System.UInt64@,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.Byte@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.Byte@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt16@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt16@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt32@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt32@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt64@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt64@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.Byte@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.Byte@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt16@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt16@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt32@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt32@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt64@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt64@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.Byte@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.Byte@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt16@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt16@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt32@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt32@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt64@,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt64@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int16,System.Byte@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int16,System.UInt16@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int16,System.UInt32@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int16,System.UInt64@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int32,System.Byte@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int32,System.UInt16@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int32,System.UInt32@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int32,System.UInt64@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int64,System.Byte@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int64,System.UInt16@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int64,System.UInt32@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int64,System.UInt64@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.SByte,System.Byte@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.SByte,System.UInt16@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.SByte,System.UInt32@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.SByte,System.UInt64@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int16,System.UInt32@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int16,System.UInt64@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int32,System.UInt32@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int32,System.UInt64@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int64,System.UInt32@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int64,System.UInt64@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.SByte,System.UInt32@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.SByte,System.UInt64@,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(System.Byte,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(System.UInt16,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(System.UInt32,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(System.UInt64,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(System.Byte,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(System.UInt16,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(System.UInt64,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadFloat(System.UInt64,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(System.Byte,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(System.UInt16,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(System.UInt32,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(System.UInt64,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadtBool(System.UInt32,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(System.Byte,System.UInt64,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(System.UInt16,System.UInt64,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(System.UInt32,System.UInt64,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(System.UInt64,System.UInt64,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(System.Byte,System.Int32,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(System.UInt16,System.Int32,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(System.UInt32,System.Int32,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(System.UInt64,System.Int32,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(System.Byte,System.Boolean,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(System.UInt16,System.Boolean,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(System.UInt32,System.Boolean,System.Int32@)
  - BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(System.UInt64,System.Boolean,System.Int32@)
  langs:
  - csharp
  - vb
  name: PrimitiveSerializeExt
  nameWithType: PrimitiveSerializeExt
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  type: Class
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: PrimitiveSerializeExt
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 30
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Extension methods for writing bits to primitive buffers.
  example: []
  syntax:
    content: public static class PrimitiveSerializeExt
    content.vb: Public Module PrimitiveSerializeExt
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.UInt64@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.UInt64@,System.Int32@,System.Int32)
  id: Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.UInt64@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ByteConverter, ref ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ByteConverter, ref ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter, ref ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 43
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ByteConverter value, ref ulong buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: BlockEngine.Client.Framework.Bitpacking.ByteConverter
      description: Value to write.
    - id: buffer
      type: System.UInt64
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As ByteConverter, buffer As ULong, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(ByteConverter, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter, ULong, Integer, Integer)
  name.vb: Inject(ByteConverter, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.UInt32@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.UInt32@,System.Int32@,System.Int32)
  id: Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.UInt32@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ByteConverter, ref uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ByteConverter, ref uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter, ref uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 54
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ByteConverter value, ref uint buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: BlockEngine.Client.Framework.Bitpacking.ByteConverter
      description: Value to write.
    - id: buffer
      type: System.UInt32
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As ByteConverter, buffer As UInteger, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(ByteConverter, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter, UInteger, Integer, Integer)
  name.vb: Inject(ByteConverter, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.UInt16@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.UInt16@,System.Int32@,System.Int32)
  id: Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.UInt16@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ByteConverter, ref ushort, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ByteConverter, ref ushort, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter, ref ushort, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 65
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ByteConverter value, ref ushort buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: BlockEngine.Client.Framework.Bitpacking.ByteConverter
      description: Value to write.
    - id: buffer
      type: System.UInt16
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As ByteConverter, buffer As UShort, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(ByteConverter, UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter, UShort, Integer, Integer)
  name.vb: Inject(ByteConverter, UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.Byte@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.Byte@,System.Int32@,System.Int32)
  id: Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter,System.Byte@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ByteConverter, ref byte, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ByteConverter, ref byte, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter, ref byte, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 76
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ByteConverter value, ref byte buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: BlockEngine.Client.Framework.Bitpacking.ByteConverter
      description: Value to write.
    - id: buffer
      type: System.Byte
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As ByteConverter, buffer As Byte, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(ByteConverter, Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(BlockEngine.Client.Framework.Bitpacking.ByteConverter, Byte, Integer, Integer)
  name.vb: Inject(ByteConverter, Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(System.UInt64,System.Int32,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(System.UInt64,System.Int32,System.Int32@,System.Int32)
  id: WriteSigned(System.UInt64,System.Int32,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: WriteSigned(ulong, int, ref int, int)
  nameWithType: PrimitiveSerializeExt.WriteSigned(ulong, int, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(ulong, int, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: WriteSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 89
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Write a signed value into a buffer using zigzag.
  example: []
  syntax:
    content: public static ulong WriteSigned(this ulong buffer, int value, ref int bitposition, int bits)
    parameters:
    - id: buffer
      type: System.UInt64
    - id: value
      type: System.Int32
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    return:
      type: System.UInt64
      description: Returns the modified buffer with the injected value.
    content.vb: Public Shared Function WriteSigned(buffer As ULong, value As Integer, bitposition As Integer, bits As Integer) As ULong
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned*
  nameWithType.vb: PrimitiveSerializeExt.WriteSigned(ULong, Integer, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(ULong, Integer, Integer, Integer)
  name.vb: WriteSigned(ULong, Integer, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int64,System.UInt64@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int64,System.UInt64@,System.Int32@,System.Int32)
  id: InjectSigned(System.Int64,System.UInt64@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(long, ref ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(long, ref ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(long, ref ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 97
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this long value, ref ulong buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int64
    - id: buffer
      type: System.UInt64
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As Long, buffer As ULong, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(Long, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(Long, ULong, Integer, Integer)
  name.vb: InjectSigned(Long, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int32,System.UInt64@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int32,System.UInt64@,System.Int32@,System.Int32)
  id: InjectSigned(System.Int32,System.UInt64@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(int, ref ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(int, ref ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(int, ref ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 105
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this int value, ref ulong buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int32
    - id: buffer
      type: System.UInt64
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As Integer, buffer As ULong, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(Integer, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(Integer, ULong, Integer, Integer)
  name.vb: InjectSigned(Integer, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int16,System.UInt64@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int16,System.UInt64@,System.Int32@,System.Int32)
  id: InjectSigned(System.Int16,System.UInt64@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(short, ref ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(short, ref ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(short, ref ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 113
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this short value, ref ulong buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int16
    - id: buffer
      type: System.UInt64
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As Short, buffer As ULong, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(Short, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(Short, ULong, Integer, Integer)
  name.vb: InjectSigned(Short, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.SByte,System.UInt64@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.SByte,System.UInt64@,System.Int32@,System.Int32)
  id: InjectSigned(System.SByte,System.UInt64@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(sbyte, ref ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(sbyte, ref ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(sbyte, ref ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 121
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this sbyte value, ref ulong buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.SByte
    - id: buffer
      type: System.UInt64
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As SByte, buffer As ULong, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(SByte, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(SByte, ULong, Integer, Integer)
  name.vb: InjectSigned(SByte, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(System.UInt64,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(System.UInt64,System.Int32@,System.Int32)
  id: ReadSigned(System.UInt64,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: ReadSigned(ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.ReadSigned(ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 130
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Read a previously injected signed int back out of a buffer.
  example: []
  syntax:
    content: public static int ReadSigned(this ulong buffer, ref int bitposition, int bits)
    parameters:
    - id: buffer
      type: System.UInt64
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    return:
      type: System.Int32
      description: Returns the restored signed value.
    content.vb: Public Shared Function ReadSigned(buffer As ULong, bitposition As Integer, bits As Integer) As Integer
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned*
  nameWithType.vb: PrimitiveSerializeExt.ReadSigned(ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(ULong, Integer, Integer)
  name.vb: ReadSigned(ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(System.UInt32,System.Int32,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(System.UInt32,System.Int32,System.Int32@,System.Int32)
  id: WriteSigned(System.UInt32,System.Int32,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: WriteSigned(uint, int, ref int, int)
  nameWithType: PrimitiveSerializeExt.WriteSigned(uint, int, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(uint, int, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: WriteSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 141
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Write a signed value into a buffer using zigzag.
  example: []
  syntax:
    content: public static uint WriteSigned(this uint buffer, int value, ref int bitposition, int bits)
    parameters:
    - id: buffer
      type: System.UInt32
    - id: value
      type: System.Int32
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    return:
      type: System.UInt32
      description: Returns the modified buffer with the injected value.
    content.vb: Public Shared Function WriteSigned(buffer As UInteger, value As Integer, bitposition As Integer, bits As Integer) As UInteger
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned*
  nameWithType.vb: PrimitiveSerializeExt.WriteSigned(UInteger, Integer, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(UInteger, Integer, Integer, Integer)
  name.vb: WriteSigned(UInteger, Integer, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int64,System.UInt32@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int64,System.UInt32@,System.Int32@,System.Int32)
  id: InjectSigned(System.Int64,System.UInt32@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(long, ref uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(long, ref uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(long, ref uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 149
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this long value, ref uint buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int64
    - id: buffer
      type: System.UInt32
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As Long, buffer As UInteger, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(Long, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(Long, UInteger, Integer, Integer)
  name.vb: InjectSigned(Long, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int32,System.UInt32@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int32,System.UInt32@,System.Int32@,System.Int32)
  id: InjectSigned(System.Int32,System.UInt32@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(int, ref uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(int, ref uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(int, ref uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 157
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this int value, ref uint buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int32
    - id: buffer
      type: System.UInt32
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As Integer, buffer As UInteger, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(Integer, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(Integer, UInteger, Integer, Integer)
  name.vb: InjectSigned(Integer, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int16,System.UInt32@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int16,System.UInt32@,System.Int32@,System.Int32)
  id: InjectSigned(System.Int16,System.UInt32@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(short, ref uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(short, ref uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(short, ref uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 165
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this short value, ref uint buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int16
    - id: buffer
      type: System.UInt32
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As Short, buffer As UInteger, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(Short, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(Short, UInteger, Integer, Integer)
  name.vb: InjectSigned(Short, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.SByte,System.UInt32@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.SByte,System.UInt32@,System.Int32@,System.Int32)
  id: InjectSigned(System.SByte,System.UInt32@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(sbyte, ref uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(sbyte, ref uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(sbyte, ref uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 173
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this sbyte value, ref uint buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.SByte
    - id: buffer
      type: System.UInt32
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As SByte, buffer As UInteger, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(SByte, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(SByte, UInteger, Integer, Integer)
  name.vb: InjectSigned(SByte, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(System.UInt32,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(System.UInt32,System.Int32@,System.Int32)
  id: ReadSigned(System.UInt32,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: ReadSigned(uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.ReadSigned(uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 182
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Read a previously injected signed int back out of a buffer.
  example: []
  syntax:
    content: public static int ReadSigned(this uint buffer, ref int bitposition, int bits)
    parameters:
    - id: buffer
      type: System.UInt32
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    return:
      type: System.Int32
      description: Returns the restored signed value.
    content.vb: Public Shared Function ReadSigned(buffer As UInteger, bitposition As Integer, bits As Integer) As Integer
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned*
  nameWithType.vb: PrimitiveSerializeExt.ReadSigned(UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(UInteger, Integer, Integer)
  name.vb: ReadSigned(UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(System.UInt16,System.Int32,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(System.UInt16,System.Int32,System.Int32@,System.Int32)
  id: WriteSigned(System.UInt16,System.Int32,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: WriteSigned(ushort, int, ref int, int)
  nameWithType: PrimitiveSerializeExt.WriteSigned(ushort, int, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(ushort, int, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: WriteSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 193
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Write a signed value into a buffer using zigzag.
  example: []
  syntax:
    content: public static ushort WriteSigned(this ushort buffer, int value, ref int bitposition, int bits)
    parameters:
    - id: buffer
      type: System.UInt16
    - id: value
      type: System.Int32
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    return:
      type: System.UInt16
      description: Returns the modified buffer with the injected value.
    content.vb: Public Shared Function WriteSigned(buffer As UShort, value As Integer, bitposition As Integer, bits As Integer) As UShort
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned*
  nameWithType.vb: PrimitiveSerializeExt.WriteSigned(UShort, Integer, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(UShort, Integer, Integer, Integer)
  name.vb: WriteSigned(UShort, Integer, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int64,System.UInt16@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int64,System.UInt16@,System.Int32@,System.Int32)
  id: InjectSigned(System.Int64,System.UInt16@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(long, ref ushort, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(long, ref ushort, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(long, ref ushort, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 201
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this long value, ref ushort buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int64
    - id: buffer
      type: System.UInt16
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As Long, buffer As UShort, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(Long, UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(Long, UShort, Integer, Integer)
  name.vb: InjectSigned(Long, UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int32,System.UInt16@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int32,System.UInt16@,System.Int32@,System.Int32)
  id: InjectSigned(System.Int32,System.UInt16@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(int, ref ushort, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(int, ref ushort, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(int, ref ushort, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 209
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this int value, ref ushort buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int32
    - id: buffer
      type: System.UInt16
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As Integer, buffer As UShort, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(Integer, UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(Integer, UShort, Integer, Integer)
  name.vb: InjectSigned(Integer, UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int16,System.UInt16@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int16,System.UInt16@,System.Int32@,System.Int32)
  id: InjectSigned(System.Int16,System.UInt16@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(short, ref ushort, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(short, ref ushort, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(short, ref ushort, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 217
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this short value, ref ushort buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int16
    - id: buffer
      type: System.UInt16
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As Short, buffer As UShort, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(Short, UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(Short, UShort, Integer, Integer)
  name.vb: InjectSigned(Short, UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.SByte,System.UInt16@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.SByte,System.UInt16@,System.Int32@,System.Int32)
  id: InjectSigned(System.SByte,System.UInt16@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(sbyte, ref ushort, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(sbyte, ref ushort, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(sbyte, ref ushort, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 225
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this sbyte value, ref ushort buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.SByte
    - id: buffer
      type: System.UInt16
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As SByte, buffer As UShort, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(SByte, UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(SByte, UShort, Integer, Integer)
  name.vb: InjectSigned(SByte, UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(System.UInt16,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(System.UInt16,System.Int32@,System.Int32)
  id: ReadSigned(System.UInt16,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: ReadSigned(ushort, ref int, int)
  nameWithType: PrimitiveSerializeExt.ReadSigned(ushort, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(ushort, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 234
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Read a previously injected signed int back out of a buffer.
  example: []
  syntax:
    content: public static int ReadSigned(this ushort buffer, ref int bitposition, int bits)
    parameters:
    - id: buffer
      type: System.UInt16
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    return:
      type: System.Int32
      description: Returns the restored signed value.
    content.vb: Public Shared Function ReadSigned(buffer As UShort, bitposition As Integer, bits As Integer) As Integer
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned*
  nameWithType.vb: PrimitiveSerializeExt.ReadSigned(UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(UShort, Integer, Integer)
  name.vb: ReadSigned(UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(System.Byte,System.Int32,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(System.Byte,System.Int32,System.Int32@,System.Int32)
  id: WriteSigned(System.Byte,System.Int32,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: WriteSigned(byte, int, ref int, int)
  nameWithType: PrimitiveSerializeExt.WriteSigned(byte, int, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(byte, int, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: WriteSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 245
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Write a signed value into a buffer using zigzag.
  example: []
  syntax:
    content: public static byte WriteSigned(this byte buffer, int value, ref int bitposition, int bits)
    parameters:
    - id: buffer
      type: System.Byte
    - id: value
      type: System.Int32
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    return:
      type: System.Byte
      description: Returns the modified buffer with the injected value.
    content.vb: Public Shared Function WriteSigned(buffer As Byte, value As Integer, bitposition As Integer, bits As Integer) As Byte
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned*
  nameWithType.vb: PrimitiveSerializeExt.WriteSigned(Byte, Integer, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned(Byte, Integer, Integer, Integer)
  name.vb: WriteSigned(Byte, Integer, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int64,System.Byte@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int64,System.Byte@,System.Int32@,System.Int32)
  id: InjectSigned(System.Int64,System.Byte@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(long, ref byte, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(long, ref byte, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(long, ref byte, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 253
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this long value, ref byte buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int64
    - id: buffer
      type: System.Byte
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As Long, buffer As Byte, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(Long, Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(Long, Byte, Integer, Integer)
  name.vb: InjectSigned(Long, Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int32,System.Byte@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int32,System.Byte@,System.Int32@,System.Int32)
  id: InjectSigned(System.Int32,System.Byte@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(int, ref byte, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(int, ref byte, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(int, ref byte, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 261
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this int value, ref byte buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int32
    - id: buffer
      type: System.Byte
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As Integer, buffer As Byte, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(Integer, Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(Integer, Byte, Integer, Integer)
  name.vb: InjectSigned(Integer, Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int16,System.Byte@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.Int16,System.Byte@,System.Int32@,System.Int32)
  id: InjectSigned(System.Int16,System.Byte@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(short, ref byte, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(short, ref byte, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(short, ref byte, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 269
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this short value, ref byte buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int16
    - id: buffer
      type: System.Byte
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As Short, buffer As Byte, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(Short, Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(Short, Byte, Integer, Integer)
  name.vb: InjectSigned(Short, Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.SByte,System.Byte@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(System.SByte,System.Byte@,System.Int32@,System.Int32)
  id: InjectSigned(System.SByte,System.Byte@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectSigned(sbyte, ref byte, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectSigned(sbyte, ref byte, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(sbyte, ref byte, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 277
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write) a signed value into a buffer using zigzag. The buffer reference is modified.
  example: []
  syntax:
    content: public static void InjectSigned(this sbyte value, ref byte buffer, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.SByte
    - id: buffer
      type: System.Byte
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As SByte, buffer As Byte, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectSigned(SByte, Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned(SByte, Byte, Integer, Integer)
  name.vb: InjectSigned(SByte, Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(System.Byte,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(System.Byte,System.Int32@,System.Int32)
  id: ReadSigned(System.Byte,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: ReadSigned(byte, ref int, int)
  nameWithType: PrimitiveSerializeExt.ReadSigned(byte, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(byte, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadSigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 286
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Read a previously injected signed int back out of a buffer.
  example: []
  syntax:
    content: public static int ReadSigned(this byte buffer, ref int bitposition, int bits)
    parameters:
    - id: buffer
      type: System.Byte
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    return:
      type: System.Int32
      description: Returns the restored signed value.
    content.vb: Public Shared Function ReadSigned(buffer As Byte, bitposition As Integer, bits As Integer) As Integer
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned*
  nameWithType.vb: PrimitiveSerializeExt.ReadSigned(Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned(Byte, Integer, Integer)
  name.vb: ReadSigned(Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(System.UInt64,System.Boolean,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(System.UInt64,System.Boolean,System.Int32@)
  id: WritetBool(System.UInt64,System.Boolean,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: WritetBool(ulong, bool, ref int)
  nameWithType: PrimitiveSerializeExt.WritetBool(ulong, bool, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(ulong, bool, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: WritetBool
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 297
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: public static ulong WritetBool(this ulong buffer, bool value, ref int bitposition)
    parameters:
    - id: buffer
      type: System.UInt64
    - id: value
      type: System.Boolean
    - id: bitposition
      type: System.Int32
    return:
      type: System.UInt64
    content.vb: Public Shared Function WritetBool(buffer As ULong, value As Boolean, bitposition As Integer) As ULong
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool*
  nameWithType.vb: PrimitiveSerializeExt.WritetBool(ULong, Boolean, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(ULong, Boolean, Integer)
  name.vb: WritetBool(ULong, Boolean, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(System.UInt32,System.Boolean,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(System.UInt32,System.Boolean,System.Int32@)
  id: WritetBool(System.UInt32,System.Boolean,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: WritetBool(uint, bool, ref int)
  nameWithType: PrimitiveSerializeExt.WritetBool(uint, bool, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(uint, bool, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: WritetBool
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 301
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: public static uint WritetBool(this uint buffer, bool value, ref int bitposition)
    parameters:
    - id: buffer
      type: System.UInt32
    - id: value
      type: System.Boolean
    - id: bitposition
      type: System.Int32
    return:
      type: System.UInt32
    content.vb: Public Shared Function WritetBool(buffer As UInteger, value As Boolean, bitposition As Integer) As UInteger
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool*
  nameWithType.vb: PrimitiveSerializeExt.WritetBool(UInteger, Boolean, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(UInteger, Boolean, Integer)
  name.vb: WritetBool(UInteger, Boolean, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(System.UInt16,System.Boolean,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(System.UInt16,System.Boolean,System.Int32@)
  id: WritetBool(System.UInt16,System.Boolean,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: WritetBool(ushort, bool, ref int)
  nameWithType: PrimitiveSerializeExt.WritetBool(ushort, bool, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(ushort, bool, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: WritetBool
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 305
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: public static ushort WritetBool(this ushort buffer, bool value, ref int bitposition)
    parameters:
    - id: buffer
      type: System.UInt16
    - id: value
      type: System.Boolean
    - id: bitposition
      type: System.Int32
    return:
      type: System.UInt16
    content.vb: Public Shared Function WritetBool(buffer As UShort, value As Boolean, bitposition As Integer) As UShort
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool*
  nameWithType.vb: PrimitiveSerializeExt.WritetBool(UShort, Boolean, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(UShort, Boolean, Integer)
  name.vb: WritetBool(UShort, Boolean, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(System.Byte,System.Boolean,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(System.Byte,System.Boolean,System.Int32@)
  id: WritetBool(System.Byte,System.Boolean,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: WritetBool(byte, bool, ref int)
  nameWithType: PrimitiveSerializeExt.WritetBool(byte, bool, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(byte, bool, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: WritetBool
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 309
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: public static byte WritetBool(this byte buffer, bool value, ref int bitposition)
    parameters:
    - id: buffer
      type: System.Byte
    - id: value
      type: System.Boolean
    - id: bitposition
      type: System.Int32
    return:
      type: System.Byte
    content.vb: Public Shared Function WritetBool(buffer As Byte, value As Boolean, bitposition As Integer) As Byte
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool*
  nameWithType.vb: PrimitiveSerializeExt.WritetBool(Byte, Boolean, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool(Byte, Boolean, Integer)
  name.vb: WritetBool(Byte, Boolean, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Boolean,System.UInt64@,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Boolean,System.UInt64@,System.Int32@)
  id: Inject(System.Boolean,System.UInt64@,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(bool, ref ulong, ref int)
  nameWithType: PrimitiveSerializeExt.Inject(bool, ref ulong, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(bool, ref ulong, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 314
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: public static void Inject(this bool value, ref ulong buffer, ref int bitposition)
    parameters:
    - id: value
      type: System.Boolean
    - id: buffer
      type: System.UInt64
    - id: bitposition
      type: System.Int32
    content.vb: Public Shared Sub Inject(value As Boolean, buffer As ULong, bitposition As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(Boolean, ULong, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(Boolean, ULong, Integer)
  name.vb: Inject(Boolean, ULong, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Boolean,System.UInt32@,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Boolean,System.UInt32@,System.Int32@)
  id: Inject(System.Boolean,System.UInt32@,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(bool, ref uint, ref int)
  nameWithType: PrimitiveSerializeExt.Inject(bool, ref uint, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(bool, ref uint, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 318
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: public static void Inject(this bool value, ref uint buffer, ref int bitposition)
    parameters:
    - id: value
      type: System.Boolean
    - id: buffer
      type: System.UInt32
    - id: bitposition
      type: System.Int32
    content.vb: Public Shared Sub Inject(value As Boolean, buffer As UInteger, bitposition As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(Boolean, UInteger, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(Boolean, UInteger, Integer)
  name.vb: Inject(Boolean, UInteger, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Boolean,System.UInt16@,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Boolean,System.UInt16@,System.Int32@)
  id: Inject(System.Boolean,System.UInt16@,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(bool, ref ushort, ref int)
  nameWithType: PrimitiveSerializeExt.Inject(bool, ref ushort, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(bool, ref ushort, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 322
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: public static void Inject(this bool value, ref ushort buffer, ref int bitposition)
    parameters:
    - id: value
      type: System.Boolean
    - id: buffer
      type: System.UInt16
    - id: bitposition
      type: System.Int32
    content.vb: Public Shared Sub Inject(value As Boolean, buffer As UShort, bitposition As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(Boolean, UShort, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(Boolean, UShort, Integer)
  name.vb: Inject(Boolean, UShort, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Boolean,System.Byte@,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Boolean,System.Byte@,System.Int32@)
  id: Inject(System.Boolean,System.Byte@,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(bool, ref byte, ref int)
  nameWithType: PrimitiveSerializeExt.Inject(bool, ref byte, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(bool, ref byte, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 326
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: public static void Inject(this bool value, ref byte buffer, ref int bitposition)
    parameters:
    - id: value
      type: System.Boolean
    - id: buffer
      type: System.Byte
    - id: bitposition
      type: System.Int32
    content.vb: Public Shared Sub Inject(value As Boolean, buffer As Byte, bitposition As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(Boolean, Byte, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(Boolean, Byte, Integer)
  name.vb: Inject(Boolean, Byte, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(System.UInt64,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(System.UInt64,System.Int32@)
  id: ReadBool(System.UInt64,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: ReadBool(ulong, ref int)
  nameWithType: PrimitiveSerializeExt.ReadBool(ulong, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(ulong, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadBool
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 331
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: public static bool ReadBool(this ulong buffer, ref int bitposition)
    parameters:
    - id: buffer
      type: System.UInt64
    - id: bitposition
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Shared Function ReadBool(buffer As ULong, bitposition As Integer) As Boolean
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool*
  nameWithType.vb: PrimitiveSerializeExt.ReadBool(ULong, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(ULong, Integer)
  name.vb: ReadBool(ULong, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadtBool(System.UInt32,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadtBool(System.UInt32,System.Int32@)
  id: ReadtBool(System.UInt32,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: ReadtBool(uint, ref int)
  nameWithType: PrimitiveSerializeExt.ReadtBool(uint, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadtBool(uint, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadtBool
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 335
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: public static bool ReadtBool(this uint buffer, ref int bitposition)
    parameters:
    - id: buffer
      type: System.UInt32
    - id: bitposition
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Shared Function ReadtBool(buffer As UInteger, bitposition As Integer) As Boolean
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadtBool*
  nameWithType.vb: PrimitiveSerializeExt.ReadtBool(UInteger, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadtBool(UInteger, Integer)
  name.vb: ReadtBool(UInteger, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(System.UInt16,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(System.UInt16,System.Int32@)
  id: ReadBool(System.UInt16,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: ReadBool(ushort, ref int)
  nameWithType: PrimitiveSerializeExt.ReadBool(ushort, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(ushort, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadBool
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 339
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: public static bool ReadBool(this ushort buffer, ref int bitposition)
    parameters:
    - id: buffer
      type: System.UInt16
    - id: bitposition
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Shared Function ReadBool(buffer As UShort, bitposition As Integer) As Boolean
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool*
  nameWithType.vb: PrimitiveSerializeExt.ReadBool(UShort, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(UShort, Integer)
  name.vb: ReadBool(UShort, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(System.Byte,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(System.Byte,System.Int32@)
  id: ReadBool(System.Byte,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: ReadBool(byte, ref int)
  nameWithType: PrimitiveSerializeExt.ReadBool(byte, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(byte, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadBool
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 343
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: public static bool ReadBool(this byte buffer, ref int bitposition)
    parameters:
    - id: buffer
      type: System.Byte
    - id: bitposition
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Shared Function ReadBool(buffer As Byte, bitposition As Integer) As Boolean
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool*
  nameWithType.vb: PrimitiveSerializeExt.ReadBool(Byte, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool(Byte, Integer)
  name.vb: ReadBool(Byte, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(System.UInt64,System.UInt64,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(System.UInt64,System.UInt64,System.Int32@,System.Int32)
  id: Write(System.UInt64,System.UInt64,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Write(ulong, ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.Write(ulong, ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(ulong, ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Write
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 361
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Primary Write x bits of source value into a target primitive (the buffer) starting at bitposition.

    WARNING: Unlike Inject, Write passes the buffer by reference, so you MUST use the return value as the new buffer value.
  example: []
  syntax:
    content: public static ulong Write(this ulong buffer, ulong value, ref int bitposition, int bits = 64)
    parameters:
    - id: buffer
      type: System.UInt64
      description: Target of write.
    - id: value
      type: System.UInt64
      description: Value to write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    return:
      type: System.UInt64
      description: Returns the modified buffer.
    content.vb: Public Shared Function Write(buffer As ULong, value As ULong, bitposition As Integer, bits As Integer = 64) As ULong
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write*
  nameWithType.vb: PrimitiveSerializeExt.Write(ULong, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(ULong, ULong, Integer, Integer)
  name.vb: Write(ULong, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(System.UInt32,System.UInt64,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(System.UInt32,System.UInt64,System.Int32@,System.Int32)
  id: Write(System.UInt32,System.UInt64,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Write(uint, ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.Write(uint, ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(uint, ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Write
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 385
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Primary Write x bits of source value into a target primitive (the buffer) starting at bitposition.

    WARNING: Unlike Inject, Write passes the buffer by reference, so you MUST use the return value as the new buffer value.
  example: []
  syntax:
    content: public static uint Write(this uint buffer, ulong value, ref int bitposition, int bits = 64)
    parameters:
    - id: buffer
      type: System.UInt32
      description: Target of write.
    - id: value
      type: System.UInt64
      description: Value to write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    return:
      type: System.UInt32
      description: Returns the modified buffer.
    content.vb: Public Shared Function Write(buffer As UInteger, value As ULong, bitposition As Integer, bits As Integer = 64) As UInteger
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write*
  nameWithType.vb: PrimitiveSerializeExt.Write(UInteger, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(UInteger, ULong, Integer, Integer)
  name.vb: Write(UInteger, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(System.UInt16,System.UInt64,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(System.UInt16,System.UInt64,System.Int32@,System.Int32)
  id: Write(System.UInt16,System.UInt64,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Write(ushort, ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.Write(ushort, ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(ushort, ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Write
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 409
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Primary Write x bits of source value into a target primitive (the buffer) starting at bitposition.

    WARNING: Unlike Inject, Write passes the buffer by reference, so you MUST use the return value as the new buffer value.
  example: []
  syntax:
    content: public static ushort Write(this ushort buffer, ulong value, ref int bitposition, int bits = 64)
    parameters:
    - id: buffer
      type: System.UInt16
      description: Target of write.
    - id: value
      type: System.UInt64
      description: Value to write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    return:
      type: System.UInt16
      description: Returns the modified buffer.
    content.vb: Public Shared Function Write(buffer As UShort, value As ULong, bitposition As Integer, bits As Integer = 64) As UShort
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write*
  nameWithType.vb: PrimitiveSerializeExt.Write(UShort, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(UShort, ULong, Integer, Integer)
  name.vb: Write(UShort, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(System.Byte,System.UInt64,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(System.Byte,System.UInt64,System.Int32@,System.Int32)
  id: Write(System.Byte,System.UInt64,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Write(byte, ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.Write(byte, ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(byte, ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Write
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 434
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Primary Write x bits of source value into a target primitive (the buffer) starting at bitposition.

    WARNING: Unlike Inject, Write passes the buffer by reference, so you MUST use the return value as the new buffer value.
  example: []
  syntax:
    content: public static byte Write(this byte buffer, ulong value, ref int bitposition, int bits = 64)
    parameters:
    - id: buffer
      type: System.Byte
      description: Target of write.
    - id: value
      type: System.UInt64
      description: Value to write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    return:
      type: System.Byte
      description: Returns the modified buffer.
    content.vb: Public Shared Function Write(buffer As Byte, value As ULong, bitposition As Integer, bits As Integer = 64) As Byte
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write*
  nameWithType.vb: PrimitiveSerializeExt.Write(Byte, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write(Byte, ULong, Integer, Integer)
  name.vb: Write(Byte, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt64@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt64@,System.Int32@,System.Int32)
  id: Inject(System.UInt64,System.UInt64@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ulong, ref ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ulong, ref ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ulong, ref ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 461
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ulong value, ref ulong buffer, ref int bitposition, int bits = 64)
    parameters:
    - id: value
      type: System.UInt64
      description: Value to write.
    - id: buffer
      type: System.UInt64
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As ULong, buffer As ULong, bitposition As Integer, bits As Integer = 64)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(ULong, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ULong, ULong, Integer, Integer)
  name.vb: Inject(ULong, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt64@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt64@,System.Int32,System.Int32)
  id: Inject(System.UInt64,System.UInt64@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ulong, ref ulong, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ulong, ref ulong, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ulong, ref ulong, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 473
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ulong value, ref ulong buffer, int bitposition, int bits = 64)
    parameters:
    - id: value
      type: System.UInt64
      description: Value to write.
    - id: buffer
      type: System.UInt64
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As ULong, buffer As ULong, bitposition As Integer, bits As Integer = 64)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(ULong, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ULong, ULong, Integer, Integer)
  name.vb: Inject(ULong, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt64@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt64@,System.Int32@,System.Int32)
  id: Inject(System.UInt32,System.UInt64@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(uint, ref ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(uint, ref ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(uint, ref ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 493
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this uint value, ref ulong buffer, ref int bitposition, int bits = 32)
    parameters:
    - id: value
      type: System.UInt32
      description: Value to write.
    - id: buffer
      type: System.UInt64
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UInteger, buffer As ULong, bitposition As Integer, bits As Integer = 32)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UInteger, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UInteger, ULong, Integer, Integer)
  name.vb: Inject(UInteger, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt64@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt64@,System.Int32,System.Int32)
  id: Inject(System.UInt32,System.UInt64@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(uint, ref ulong, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(uint, ref ulong, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(uint, ref ulong, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 505
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this uint value, ref ulong buffer, int bitposition, int bits = 32)
    parameters:
    - id: value
      type: System.UInt32
      description: Value to write.
    - id: buffer
      type: System.UInt64
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UInteger, buffer As ULong, bitposition As Integer, bits As Integer = 32)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UInteger, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UInteger, ULong, Integer, Integer)
  name.vb: Inject(UInteger, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt64@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt64@,System.Int32@,System.Int32)
  id: Inject(System.UInt16,System.UInt64@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ushort, ref ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ushort, ref ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ushort, ref ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 525
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ushort value, ref ulong buffer, ref int bitposition, int bits = 16)
    parameters:
    - id: value
      type: System.UInt16
      description: Value to write.
    - id: buffer
      type: System.UInt64
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UShort, buffer As ULong, bitposition As Integer, bits As Integer = 16)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UShort, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UShort, ULong, Integer, Integer)
  name.vb: Inject(UShort, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt64@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt64@,System.Int32,System.Int32)
  id: Inject(System.UInt16,System.UInt64@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ushort, ref ulong, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ushort, ref ulong, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ushort, ref ulong, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 537
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ushort value, ref ulong buffer, int bitposition, int bits = 16)
    parameters:
    - id: value
      type: System.UInt16
      description: Value to write.
    - id: buffer
      type: System.UInt64
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UShort, buffer As ULong, bitposition As Integer, bits As Integer = 16)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UShort, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UShort, ULong, Integer, Integer)
  name.vb: Inject(UShort, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt64@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt64@,System.Int32@,System.Int32)
  id: Inject(System.Byte,System.UInt64@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(byte, ref ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(byte, ref ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(byte, ref ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 549
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this byte value, ref ulong buffer, ref int bitposition, int bits = 8)
    parameters:
    - id: value
      type: System.Byte
      description: Value to write.
    - id: buffer
      type: System.UInt64
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As Byte, buffer As ULong, bitposition As Integer, bits As Integer = 8)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(Byte, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(Byte, ULong, Integer, Integer)
  name.vb: Inject(Byte, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt64@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt64@,System.Int32,System.Int32)
  id: Inject(System.Byte,System.UInt64@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(byte, ref ulong, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(byte, ref ulong, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(byte, ref ulong, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 560
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this byte value, ref ulong buffer, int bitposition, int bits = 8)
    parameters:
    - id: value
      type: System.Byte
      description: Value to write.
    - id: buffer
      type: System.UInt64
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As Byte, buffer As ULong, bitposition As Integer, bits As Integer = 8)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(Byte, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(Byte, ULong, Integer, Integer)
  name.vb: Inject(Byte, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int64,System.UInt64@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int64,System.UInt64@,System.Int32@,System.Int32)
  id: InjectUnsigned(System.Int64,System.UInt64@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectUnsigned(long, ref ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectUnsigned(long, ref ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(long, ref ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectUnsigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 573
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.

    Negative numbers will not serialize properly. Use InjectUnsigned for signed values.
  example: []
  syntax:
    content: public static void InjectUnsigned(this long value, ref ulong buffer, ref int bitposition, int bits = 32)
    parameters:
    - id: value
      type: System.Int64
      description: Value to write.
    - id: buffer
      type: System.UInt64
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub InjectUnsigned(value As Long, buffer As ULong, bitposition As Integer, bits As Integer = 32)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectUnsigned(Long, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(Long, ULong, Integer, Integer)
  name.vb: InjectUnsigned(Long, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int32,System.UInt64@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int32,System.UInt64@,System.Int32@,System.Int32)
  id: InjectUnsigned(System.Int32,System.UInt64@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectUnsigned(int, ref ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectUnsigned(int, ref ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(int, ref ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectUnsigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 585
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.

    Negative numbers will not serialize properly. Use InjectUnsigned for signed values.
  example: []
  syntax:
    content: public static void InjectUnsigned(this int value, ref ulong buffer, ref int bitposition, int bits = 32)
    parameters:
    - id: value
      type: System.Int32
      description: Value to write.
    - id: buffer
      type: System.UInt64
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub InjectUnsigned(value As Integer, buffer As ULong, bitposition As Integer, bits As Integer = 32)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectUnsigned(Integer, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(Integer, ULong, Integer, Integer)
  name.vb: InjectUnsigned(Integer, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int16,System.UInt64@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int16,System.UInt64@,System.Int32@,System.Int32)
  id: InjectUnsigned(System.Int16,System.UInt64@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectUnsigned(short, ref ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectUnsigned(short, ref ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(short, ref ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectUnsigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 597
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.

    Negative numbers will not serialize properly. Use InjectUnsigned for signed values.
  example: []
  syntax:
    content: public static void InjectUnsigned(this short value, ref ulong buffer, ref int bitposition, int bits = 32)
    parameters:
    - id: value
      type: System.Int16
      description: Value to write.
    - id: buffer
      type: System.UInt64
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub InjectUnsigned(value As Short, buffer As ULong, bitposition As Integer, bits As Integer = 32)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectUnsigned(Short, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(Short, ULong, Integer, Integer)
  name.vb: InjectUnsigned(Short, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.SByte,System.UInt64@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.SByte,System.UInt64@,System.Int32@,System.Int32)
  id: InjectUnsigned(System.SByte,System.UInt64@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectUnsigned(sbyte, ref ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectUnsigned(sbyte, ref ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(sbyte, ref ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectUnsigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 609
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.

    Negative numbers will not serialize properly. Use InjectUnsigned for signed values.
  example: []
  syntax:
    content: public static void InjectUnsigned(this sbyte value, ref ulong buffer, ref int bitposition, int bits = 32)
    parameters:
    - id: value
      type: System.SByte
      description: Value to write.
    - id: buffer
      type: System.UInt64
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub InjectUnsigned(value As SByte, buffer As ULong, bitposition As Integer, bits As Integer = 32)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectUnsigned(SByte, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(SByte, ULong, Integer, Integer)
  name.vb: InjectUnsigned(SByte, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt32@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt32@,System.Int32@,System.Int32)
  id: Inject(System.UInt64,System.UInt32@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ulong, ref uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ulong, ref uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ulong, ref uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 625
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ulong value, ref uint buffer, ref int bitposition, int bits = 64)
    parameters:
    - id: value
      type: System.UInt64
      description: Value to write.
    - id: buffer
      type: System.UInt32
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As ULong, buffer As UInteger, bitposition As Integer, bits As Integer = 64)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(ULong, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ULong, UInteger, Integer, Integer)
  name.vb: Inject(ULong, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt32@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt32@,System.Int32,System.Int32)
  id: Inject(System.UInt64,System.UInt32@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ulong, ref uint, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ulong, ref uint, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ulong, ref uint, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 637
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ulong value, ref uint buffer, int bitposition, int bits = 64)
    parameters:
    - id: value
      type: System.UInt64
      description: Value to write.
    - id: buffer
      type: System.UInt32
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As ULong, buffer As UInteger, bitposition As Integer, bits As Integer = 64)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(ULong, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ULong, UInteger, Integer, Integer)
  name.vb: Inject(ULong, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt32@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt32@,System.Int32@,System.Int32)
  id: Inject(System.UInt32,System.UInt32@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(uint, ref uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(uint, ref uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(uint, ref uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 650
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this uint value, ref uint buffer, ref int bitposition, int bits = 32)
    parameters:
    - id: value
      type: System.UInt32
      description: Value to write.
    - id: buffer
      type: System.UInt32
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UInteger, buffer As UInteger, bitposition As Integer, bits As Integer = 32)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UInteger, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UInteger, UInteger, Integer, Integer)
  name.vb: Inject(UInteger, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt32@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt32@,System.Int32,System.Int32)
  id: Inject(System.UInt32,System.UInt32@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(uint, ref uint, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(uint, ref uint, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(uint, ref uint, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 662
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this uint value, ref uint buffer, int bitposition, int bits = 32)
    parameters:
    - id: value
      type: System.UInt32
      description: Value to write.
    - id: buffer
      type: System.UInt32
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UInteger, buffer As UInteger, bitposition As Integer, bits As Integer = 32)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UInteger, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UInteger, UInteger, Integer, Integer)
  name.vb: Inject(UInteger, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt32@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt32@,System.Int32@,System.Int32)
  id: Inject(System.UInt16,System.UInt32@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ushort, ref uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ushort, ref uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ushort, ref uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 674
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ushort value, ref uint buffer, ref int bitposition, int bits = 16)
    parameters:
    - id: value
      type: System.UInt16
      description: Value to write.
    - id: buffer
      type: System.UInt32
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UShort, buffer As UInteger, bitposition As Integer, bits As Integer = 16)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UShort, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UShort, UInteger, Integer, Integer)
  name.vb: Inject(UShort, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt32@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt32@,System.Int32,System.Int32)
  id: Inject(System.UInt16,System.UInt32@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ushort, ref uint, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ushort, ref uint, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ushort, ref uint, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 686
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ushort value, ref uint buffer, int bitposition, int bits = 16)
    parameters:
    - id: value
      type: System.UInt16
      description: Value to write.
    - id: buffer
      type: System.UInt32
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UShort, buffer As UInteger, bitposition As Integer, bits As Integer = 16)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UShort, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UShort, UInteger, Integer, Integer)
  name.vb: Inject(UShort, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt32@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt32@,System.Int32@,System.Int32)
  id: Inject(System.Byte,System.UInt32@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(byte, ref uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(byte, ref uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(byte, ref uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 698
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this byte value, ref uint buffer, ref int bitposition, int bits = 8)
    parameters:
    - id: value
      type: System.Byte
      description: Value to write.
    - id: buffer
      type: System.UInt32
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As Byte, buffer As UInteger, bitposition As Integer, bits As Integer = 8)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(Byte, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(Byte, UInteger, Integer, Integer)
  name.vb: Inject(Byte, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt32@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt32@,System.Int32,System.Int32)
  id: Inject(System.Byte,System.UInt32@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(byte, ref uint, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(byte, ref uint, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(byte, ref uint, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 710
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this byte value, ref uint buffer, int bitposition, int bits = 8)
    parameters:
    - id: value
      type: System.Byte
      description: Value to write.
    - id: buffer
      type: System.UInt32
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As Byte, buffer As UInteger, bitposition As Integer, bits As Integer = 8)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(Byte, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(Byte, UInteger, Integer, Integer)
  name.vb: Inject(Byte, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int64,System.UInt32@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int64,System.UInt32@,System.Int32@,System.Int32)
  id: InjectUnsigned(System.Int64,System.UInt32@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectUnsigned(long, ref uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectUnsigned(long, ref uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(long, ref uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectUnsigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 722
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.

    Negative numbers will not serialize properly. Use InjectUnsigned for signed values.
  example: []
  syntax:
    content: public static void InjectUnsigned(this long value, ref uint buffer, ref int bitposition, int bits = 64)
    parameters:
    - id: value
      type: System.Int64
    - id: buffer
      type: System.UInt32
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub InjectUnsigned(value As Long, buffer As UInteger, bitposition As Integer, bits As Integer = 64)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectUnsigned(Long, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(Long, UInteger, Integer, Integer)
  name.vb: InjectUnsigned(Long, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int32,System.UInt32@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int32,System.UInt32@,System.Int32@,System.Int32)
  id: InjectUnsigned(System.Int32,System.UInt32@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectUnsigned(int, ref uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectUnsigned(int, ref uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(int, ref uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectUnsigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 732
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.

    Negative numbers will not serialize properly. Use InjectUnsigned for signed values.
  example: []
  syntax:
    content: public static void InjectUnsigned(this int value, ref uint buffer, ref int bitposition, int bits = 64)
    parameters:
    - id: value
      type: System.Int32
    - id: buffer
      type: System.UInt32
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub InjectUnsigned(value As Integer, buffer As UInteger, bitposition As Integer, bits As Integer = 64)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectUnsigned(Integer, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(Integer, UInteger, Integer, Integer)
  name.vb: InjectUnsigned(Integer, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int16,System.UInt32@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.Int16,System.UInt32@,System.Int32@,System.Int32)
  id: InjectUnsigned(System.Int16,System.UInt32@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectUnsigned(short, ref uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectUnsigned(short, ref uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(short, ref uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectUnsigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 742
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.

    Negative numbers will not serialize properly. Use InjectUnsigned for signed values.
  example: []
  syntax:
    content: public static void InjectUnsigned(this short value, ref uint buffer, ref int bitposition, int bits = 64)
    parameters:
    - id: value
      type: System.Int16
    - id: buffer
      type: System.UInt32
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub InjectUnsigned(value As Short, buffer As UInteger, bitposition As Integer, bits As Integer = 64)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectUnsigned(Short, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(Short, UInteger, Integer, Integer)
  name.vb: InjectUnsigned(Short, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.SByte,System.UInt32@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(System.SByte,System.UInt32@,System.Int32@,System.Int32)
  id: InjectUnsigned(System.SByte,System.UInt32@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: InjectUnsigned(sbyte, ref uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.InjectUnsigned(sbyte, ref uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(sbyte, ref uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectUnsigned
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 752
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.

    Negative numbers will not serialize properly. Use InjectUnsigned for signed values.
  example: []
  syntax:
    content: public static void InjectUnsigned(this sbyte value, ref uint buffer, ref int bitposition, int bits = 64)
    parameters:
    - id: value
      type: System.SByte
    - id: buffer
      type: System.UInt32
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub InjectUnsigned(value As SByte, buffer As UInteger, bitposition As Integer, bits As Integer = 64)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned*
  nameWithType.vb: PrimitiveSerializeExt.InjectUnsigned(SByte, UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned(SByte, UInteger, Integer, Integer)
  name.vb: InjectUnsigned(SByte, UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt16@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt16@,System.Int32@,System.Int32)
  id: Inject(System.UInt64,System.UInt16@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ulong, ref ushort, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ulong, ref ushort, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ulong, ref ushort, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 768
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ulong value, ref ushort buffer, ref int bitposition, int bits = 16)
    parameters:
    - id: value
      type: System.UInt64
      description: Value to write.
    - id: buffer
      type: System.UInt16
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As ULong, buffer As UShort, bitposition As Integer, bits As Integer = 16)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(ULong, UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ULong, UShort, Integer, Integer)
  name.vb: Inject(ULong, UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt16@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.UInt16@,System.Int32,System.Int32)
  id: Inject(System.UInt64,System.UInt16@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ulong, ref ushort, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ulong, ref ushort, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ulong, ref ushort, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 779
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ulong value, ref ushort buffer, int bitposition, int bits = 16)
    parameters:
    - id: value
      type: System.UInt64
      description: Value to write.
    - id: buffer
      type: System.UInt16
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As ULong, buffer As UShort, bitposition As Integer, bits As Integer = 16)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(ULong, UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ULong, UShort, Integer, Integer)
  name.vb: Inject(ULong, UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt16@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt16@,System.Int32@,System.Int32)
  id: Inject(System.UInt32,System.UInt16@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(uint, ref ushort, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(uint, ref ushort, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(uint, ref ushort, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 790
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this uint value, ref ushort buffer, ref int bitposition, int bits = 16)
    parameters:
    - id: value
      type: System.UInt32
      description: Value to write.
    - id: buffer
      type: System.UInt16
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UInteger, buffer As UShort, bitposition As Integer, bits As Integer = 16)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UInteger, UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UInteger, UShort, Integer, Integer)
  name.vb: Inject(UInteger, UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt16@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.UInt16@,System.Int32,System.Int32)
  id: Inject(System.UInt32,System.UInt16@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(uint, ref ushort, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(uint, ref ushort, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(uint, ref ushort, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 801
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this uint value, ref ushort buffer, int bitposition, int bits = 16)
    parameters:
    - id: value
      type: System.UInt32
      description: Value to write.
    - id: buffer
      type: System.UInt16
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UInteger, buffer As UShort, bitposition As Integer, bits As Integer = 16)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UInteger, UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UInteger, UShort, Integer, Integer)
  name.vb: Inject(UInteger, UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt16@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt16@,System.Int32@,System.Int32)
  id: Inject(System.UInt16,System.UInt16@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ushort, ref ushort, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ushort, ref ushort, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ushort, ref ushort, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 812
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ushort value, ref ushort buffer, ref int bitposition, int bits = 16)
    parameters:
    - id: value
      type: System.UInt16
      description: Value to write.
    - id: buffer
      type: System.UInt16
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UShort, buffer As UShort, bitposition As Integer, bits As Integer = 16)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UShort, UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UShort, UShort, Integer, Integer)
  name.vb: Inject(UShort, UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt16@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.UInt16@,System.Int32,System.Int32)
  id: Inject(System.UInt16,System.UInt16@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ushort, ref ushort, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ushort, ref ushort, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ushort, ref ushort, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 823
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ushort value, ref ushort buffer, int bitposition, int bits = 16)
    parameters:
    - id: value
      type: System.UInt16
      description: Value to write.
    - id: buffer
      type: System.UInt16
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UShort, buffer As UShort, bitposition As Integer, bits As Integer = 16)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UShort, UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UShort, UShort, Integer, Integer)
  name.vb: Inject(UShort, UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt16@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt16@,System.Int32@,System.Int32)
  id: Inject(System.Byte,System.UInt16@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(byte, ref ushort, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(byte, ref ushort, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(byte, ref ushort, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 834
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this byte value, ref ushort buffer, ref int bitposition, int bits = 8)
    parameters:
    - id: value
      type: System.Byte
      description: Value to write.
    - id: buffer
      type: System.UInt16
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As Byte, buffer As UShort, bitposition As Integer, bits As Integer = 8)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(Byte, UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(Byte, UShort, Integer, Integer)
  name.vb: Inject(Byte, UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt16@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.UInt16@,System.Int32,System.Int32)
  id: Inject(System.Byte,System.UInt16@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(byte, ref ushort, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(byte, ref ushort, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(byte, ref ushort, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 845
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this byte value, ref ushort buffer, int bitposition, int bits = 8)
    parameters:
    - id: value
      type: System.Byte
      description: Value to write.
    - id: buffer
      type: System.UInt16
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As Byte, buffer As UShort, bitposition As Integer, bits As Integer = 8)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(Byte, UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(Byte, UShort, Integer, Integer)
  name.vb: Inject(Byte, UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.Byte@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.Byte@,System.Int32@,System.Int32)
  id: Inject(System.UInt64,System.Byte@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ulong, ref byte, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ulong, ref byte, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ulong, ref byte, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 861
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ulong value, ref byte buffer, ref int bitposition, int bits = 8)
    parameters:
    - id: value
      type: System.UInt64
      description: Value to write.
    - id: buffer
      type: System.Byte
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As ULong, buffer As Byte, bitposition As Integer, bits As Integer = 8)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(ULong, Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ULong, Byte, Integer, Integer)
  name.vb: Inject(ULong, Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.Byte@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt64,System.Byte@,System.Int32,System.Int32)
  id: Inject(System.UInt64,System.Byte@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ulong, ref byte, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ulong, ref byte, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ulong, ref byte, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 872
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ulong value, ref byte buffer, int bitposition, int bits = 8)
    parameters:
    - id: value
      type: System.UInt64
      description: Value to write.
    - id: buffer
      type: System.Byte
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As ULong, buffer As Byte, bitposition As Integer, bits As Integer = 8)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(ULong, Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ULong, Byte, Integer, Integer)
  name.vb: Inject(ULong, Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.Byte@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.Byte@,System.Int32@,System.Int32)
  id: Inject(System.UInt32,System.Byte@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(uint, ref byte, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(uint, ref byte, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(uint, ref byte, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 884
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this uint value, ref byte buffer, ref int bitposition, int bits = 8)
    parameters:
    - id: value
      type: System.UInt32
      description: Value to write.
    - id: buffer
      type: System.Byte
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UInteger, buffer As Byte, bitposition As Integer, bits As Integer = 8)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UInteger, Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UInteger, Byte, Integer, Integer)
  name.vb: Inject(UInteger, Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.Byte@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt32,System.Byte@,System.Int32,System.Int32)
  id: Inject(System.UInt32,System.Byte@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(uint, ref byte, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(uint, ref byte, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(uint, ref byte, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 895
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this uint value, ref byte buffer, int bitposition, int bits = 8)
    parameters:
    - id: value
      type: System.UInt32
      description: Value to write.
    - id: buffer
      type: System.Byte
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UInteger, buffer As Byte, bitposition As Integer, bits As Integer = 8)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UInteger, Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UInteger, Byte, Integer, Integer)
  name.vb: Inject(UInteger, Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.Byte@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.Byte@,System.Int32@,System.Int32)
  id: Inject(System.UInt16,System.Byte@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ushort, ref byte, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ushort, ref byte, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ushort, ref byte, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 907
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ushort value, ref byte buffer, ref int bitposition, int bits = 8)
    parameters:
    - id: value
      type: System.UInt16
      description: Value to write.
    - id: buffer
      type: System.Byte
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UShort, buffer As Byte, bitposition As Integer, bits As Integer = 8)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UShort, Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UShort, Byte, Integer, Integer)
  name.vb: Inject(UShort, Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.Byte@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.UInt16,System.Byte@,System.Int32,System.Int32)
  id: Inject(System.UInt16,System.Byte@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(ushort, ref byte, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(ushort, ref byte, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(ushort, ref byte, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 918
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this ushort value, ref byte buffer, int bitposition, int bits = 8)
    parameters:
    - id: value
      type: System.UInt16
      description: Value to write.
    - id: buffer
      type: System.Byte
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As UShort, buffer As Byte, bitposition As Integer, bits As Integer = 8)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(UShort, Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(UShort, Byte, Integer, Integer)
  name.vb: Inject(UShort, Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.Byte@,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.Byte@,System.Int32@,System.Int32)
  id: Inject(System.Byte,System.Byte@,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(byte, ref byte, ref int, int)
  nameWithType: PrimitiveSerializeExt.Inject(byte, ref byte, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(byte, ref byte, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 930
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this byte value, ref byte buffer, ref int bitposition, int bits = 8)
    parameters:
    - id: value
      type: System.Byte
      description: Value to write.
    - id: buffer
      type: System.Byte
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented write position. Writing will begin at this position in the buffer, and this value will have bits added to it.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As Byte, buffer As Byte, bitposition As Integer, bits As Integer = 8)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(Byte, Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(Byte, Byte, Integer, Integer)
  name.vb: Inject(Byte, Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.Byte@,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Byte,System.Byte@,System.Int32,System.Int32)
  id: Inject(System.Byte,System.Byte@,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(byte, ref byte, int, int)
  nameWithType: PrimitiveSerializeExt.Inject(byte, ref byte, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(byte, ref byte, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 941
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (write/serialize) x bits of source value into a target primitive (the buffer) starting at bitposition.
  example: []
  syntax:
    content: public static void Inject(this byte value, ref byte buffer, int bitposition, int bits = 8)
    parameters:
    - id: value
      type: System.Byte
      description: Value to write.
    - id: buffer
      type: System.Byte
      description: Target of write.
    - id: bitposition
      type: System.Int32
      description: Write position. Writing will begin at this position in the buffer.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to target buffer.
    content.vb: Public Shared Sub Inject(value As Byte, buffer As Byte, bitposition As Integer, bits As Integer = 8)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(Byte, Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(Byte, Byte, Integer, Integer)
  name.vb: Inject(Byte, Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt64,System.Int32,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt64,System.Int32,System.Int32@)
  id: Extract(System.UInt64,System.Int32,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Extract(ulong, int, ref int)
  nameWithType: PrimitiveSerializeExt.Extract(ulong, int, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(ulong, int, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Extract
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 956
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Extract (read/deserialize) a value from a source primitive (the buffer) by reading x bits starting at the bitposition, and return the reconstructed value.
  example: []
  syntax:
    content: >-
      [Obsolete("Argument order changed")]

      public static ulong Extract(this ulong value, int bits, ref int bitposition)
    parameters:
    - id: value
      type: System.UInt64
      description: Source primitive buffer to read from.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to return value.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented reference to the value read bit pointer. Extraction starts at this point in value.
    return:
      type: System.UInt64
      description: Downcast this ulong return value to the desired type.
    content.vb: >-
      <Obsolete("Argument order changed")>

      Public Shared Function Extract(value As ULong, bits As Integer, bitposition As Integer) As ULong
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Argument order changed
  nameWithType.vb: PrimitiveSerializeExt.Extract(ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(ULong, Integer, Integer)
  name.vb: Extract(ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(System.UInt64,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(System.UInt64,System.Int32@,System.Int32)
  id: Read(System.UInt64,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Read(ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.Read(ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Read
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 973
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Read a value from a source primitive (the buffer) by reading x bits starting at the bitposition, and return the reconstructed value.
  example: []
  syntax:
    content: public static ulong Read(this ulong value, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt64
      description: Source primitive buffer to read from.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented reference to the value read bit pointer. Read starts at this point in value.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to return value.
    return:
      type: System.UInt64
      description: Downcast this ulong return value to the desired type.
    content.vb: Public Shared Function Read(value As ULong, bitposition As Integer, bits As Integer) As ULong
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read*
  nameWithType.vb: PrimitiveSerializeExt.Read(ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(ULong, Integer, Integer)
  name.vb: Read(ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt64,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt64,System.Int32@,System.Int32)
  id: Extract(System.UInt64,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Extract(ulong, ref int, int)
  nameWithType: PrimitiveSerializeExt.Extract(ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Extract
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 981
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: >-
      [Obsolete("Use Read instead.")]

      public static ulong Extract(this ulong value, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt64
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    return:
      type: System.UInt64
    content.vb: >-
      <Obsolete("Use Read instead.")>

      Public Shared Function Extract(value As ULong, bitposition As Integer, bits As Integer) As ULong
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use Read instead.
  nameWithType.vb: PrimitiveSerializeExt.Extract(ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(ULong, Integer, Integer)
  name.vb: Extract(ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt64,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt64,System.Int32)
  id: Extract(System.UInt64,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Extract(ulong, int)
  nameWithType: PrimitiveSerializeExt.Extract(ulong, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(ulong, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Extract
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 997
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Extract and return bits from value.
  example: []
  syntax:
    content: >-
      [Obsolete("Always include the [ref int bitposition] argument. Extracting from position 0 would be better handled with a mask operation.")]

      public static ulong Extract(this ulong value, int bits)
    parameters:
    - id: value
      type: System.UInt64
      description: Source primitive.
    - id: bits
      type: System.Int32
      description: How many lower order bits to read.
    return:
      type: System.UInt64
      description: Cast the return value to the desired type.
    content.vb: >-
      <Obsolete("Always include the [ref int bitposition] argument. Extracting from position 0 would be better handled with a mask operation.")>

      Public Shared Function Extract(value As ULong, bits As Integer) As ULong
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Always include the [ref int bitposition] argument. Extracting from position 0 would be better handled with a mask operation.
  nameWithType.vb: PrimitiveSerializeExt.Extract(ULong, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(ULong, Integer)
  name.vb: Extract(ULong, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(System.UInt32,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(System.UInt32,System.Int32@,System.Int32)
  id: Read(System.UInt32,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Read(uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.Read(uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Read
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 1017
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Read a value from a source primitive (the buffer) by reading x bits starting at the bitposition, and return the reconstructed value.
  example: []
  syntax:
    content: public static uint Read(this uint value, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt32
      description: Source primitive buffer to read from.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented reference to the value read bit pointer. Read starts at this point in value.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to return value.
    return:
      type: System.UInt32
      description: Cast this uint return value to the desired type.
    content.vb: Public Shared Function Read(value As UInteger, bitposition As Integer, bits As Integer) As UInteger
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read*
  nameWithType.vb: PrimitiveSerializeExt.Read(UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(UInteger, Integer, Integer)
  name.vb: Read(UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt32,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt32,System.Int32@,System.Int32)
  id: Extract(System.UInt32,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Extract(uint, ref int, int)
  nameWithType: PrimitiveSerializeExt.Extract(uint, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(uint, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Extract
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 1025
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: >-
      [Obsolete("Use Read instead.")]

      public static uint Extract(this uint value, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt32
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    return:
      type: System.UInt32
    content.vb: >-
      <Obsolete("Use Read instead.")>

      Public Shared Function Extract(value As UInteger, bitposition As Integer, bits As Integer) As UInteger
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use Read instead.
  nameWithType.vb: PrimitiveSerializeExt.Extract(UInteger, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(UInteger, Integer, Integer)
  name.vb: Extract(UInteger, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt32,System.Int32)
  id: Extract(System.UInt32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Extract(uint, int)
  nameWithType: PrimitiveSerializeExt.Extract(uint, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(uint, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Extract
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 1040
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Extract and return bits from value.
  example: []
  syntax:
    content: >-
      [Obsolete("Always include the [ref int bitposition] argument. Extracting from position 0 would be better handled with a mask operation.")]

      public static uint Extract(this uint value, int bits)
    parameters:
    - id: value
      type: System.UInt32
      description: Source primitive.
    - id: bits
      type: System.Int32
      description: How many lower order bits to read.
    return:
      type: System.UInt32
      description: Cast the return value to the desired type.
    content.vb: >-
      <Obsolete("Always include the [ref int bitposition] argument. Extracting from position 0 would be better handled with a mask operation.")>

      Public Shared Function Extract(value As UInteger, bits As Integer) As UInteger
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Always include the [ref int bitposition] argument. Extracting from position 0 would be better handled with a mask operation.
  nameWithType.vb: PrimitiveSerializeExt.Extract(UInteger, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(UInteger, Integer)
  name.vb: Extract(UInteger, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(System.UInt16,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(System.UInt16,System.Int32@,System.Int32)
  id: Read(System.UInt16,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Read(ushort, ref int, int)
  nameWithType: PrimitiveSerializeExt.Read(ushort, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(ushort, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Read
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 1060
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Read a value from a source primitive (the buffer) by reading x bits starting at the bitposition, and return the reconstructed value.
  example: []
  syntax:
    content: public static uint Read(this ushort value, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt16
      description: Source primitive buffer to read from.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented reference to the value read bit pointer. Read starts at this point in value.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to return value.
    return:
      type: System.UInt32
      description: Cast this ushort return value to the desired type.
    content.vb: Public Shared Function Read(value As UShort, bitposition As Integer, bits As Integer) As UInteger
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read*
  nameWithType.vb: PrimitiveSerializeExt.Read(UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(UShort, Integer, Integer)
  name.vb: Read(UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt16,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.UInt16,System.Int32@,System.Int32)
  id: Extract(System.UInt16,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Extract(ushort, ref int, int)
  nameWithType: PrimitiveSerializeExt.Extract(ushort, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(ushort, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Extract
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 1068
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: >-
      [Obsolete("Use Read instead.")]

      public static uint Extract(this ushort value, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt16
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    return:
      type: System.UInt32
    content.vb: >-
      <Obsolete("Use Read instead.")>

      Public Shared Function Extract(value As UShort, bitposition As Integer, bits As Integer) As UInteger
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use Read instead.
  nameWithType.vb: PrimitiveSerializeExt.Extract(UShort, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(UShort, Integer, Integer)
  name.vb: Extract(UShort, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(System.Byte,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(System.Byte,System.Int32@,System.Int32)
  id: Read(System.Byte,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Read(byte, ref int, int)
  nameWithType: PrimitiveSerializeExt.Read(byte, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(byte, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Read
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 1089
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Read a value from a source primitive (the buffer) by reading x bits starting at the bitposition, and return the reconstructed value.
  example: []
  syntax:
    content: public static uint Read(this byte value, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Byte
      description: Source primitive buffer to read from.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented reference to the value read bit pointer. Read starts at this point in value.
    - id: bits
      type: System.Int32
      description: Number of lower order bits to copy from source to return value.
    return:
      type: System.UInt32
      description: Downcast this uint return value to the desired type.
    content.vb: Public Shared Function Read(value As Byte, bitposition As Integer, bits As Integer) As UInteger
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read*
  nameWithType.vb: PrimitiveSerializeExt.Read(Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read(Byte, Integer, Integer)
  name.vb: Read(Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.Byte,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.Byte,System.Int32@,System.Int32)
  id: Extract(System.Byte,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Extract(byte, ref int, int)
  nameWithType: PrimitiveSerializeExt.Extract(byte, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(byte, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Extract
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 1097
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: >-
      [Obsolete("Use Read instead.")]

      public static uint Extract(this byte value, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Byte
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    return:
      type: System.UInt32
    content.vb: >-
      <Obsolete("Use Read instead.")>

      Public Shared Function Extract(value As Byte, bitposition As Integer, bits As Integer) As UInteger
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use Read instead.
  nameWithType.vb: PrimitiveSerializeExt.Extract(Byte, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(Byte, Integer, Integer)
  name.vb: Extract(Byte, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.Byte,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(System.Byte,System.Int32)
  id: Extract(System.Byte,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Extract(byte, int)
  nameWithType: PrimitiveSerializeExt.Extract(byte, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(byte, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Extract
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 1112
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Extract and return bits from value.
  example: []
  syntax:
    content: >-
      [Obsolete("Always include the [ref int bitposition] argument. Extracting from position 0 would be better handled with a mask operation.")]

      public static byte Extract(this byte value, int bits)
    parameters:
    - id: value
      type: System.Byte
      description: Source primitive.
    - id: bits
      type: System.Int32
      description: How many lower order bits to read.
    return:
      type: System.Byte
      description: Cast the return value to the desired type.
    content.vb: >-
      <Obsolete("Always include the [ref int bitposition] argument. Extracting from position 0 would be better handled with a mask operation.")>

      Public Shared Function Extract(value As Byte, bits As Integer) As Byte
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Always include the [ref int bitposition] argument. Extracting from position 0 would be better handled with a mask operation.
  nameWithType.vb: PrimitiveSerializeExt.Extract(Byte, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract(Byte, Integer)
  name.vb: Extract(Byte, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Single,System.UInt64@,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(System.Single,System.UInt64@,System.Int32@)
  id: Inject(System.Single,System.UInt64@,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: Inject(float, ref ulong, ref int)
  nameWithType: PrimitiveSerializeExt.Inject(float, ref ulong, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(float, ref ulong, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 1131
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Inject (serialize/write) a float into a primitive buffer at the bitposition. No compression occurs, this is a full 32bit write.
  example: []
  syntax:
    content: public static void Inject(this float f, ref ulong buffer, ref int bitposition)
    parameters:
    - id: f
      type: System.Single
      description: Float to compress and write.
    - id: buffer
      type: System.UInt64
      description: Target buffer for write.
    - id: bitposition
      type: System.Int32
      description: Auto-incremented read position for the buffer (in bits)
    content.vb: Public Shared Sub Inject(f As Single, buffer As ULong, bitposition As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  nameWithType.vb: PrimitiveSerializeExt.Inject(Single, ULong, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject(Single, ULong, Integer)
  name.vb: Inject(Single, ULong, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadFloat(System.UInt64,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadFloat(System.UInt64,System.Int32@)
  id: ReadFloat(System.UInt64,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: ReadFloat(ulong, ref int)
  nameWithType: PrimitiveSerializeExt.ReadFloat(ulong, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadFloat(ulong, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadFloat
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 1142
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: REad a float from a bitpacked primitive(value) starting at bitposition.
  example: []
  syntax:
    content: public static float ReadFloat(this ulong buffer, ref int bitposition)
    parameters:
    - id: buffer
      type: System.UInt64
      description: ''
    - id: bitposition
      type: System.Int32
      description: Auto-incremented read position for the buffer (in bits)
    return:
      type: System.Single
      description: ''
    content.vb: Public Shared Function ReadFloat(buffer As ULong, bitposition As Integer) As Single
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadFloat*
  nameWithType.vb: PrimitiveSerializeExt.ReadFloat(ULong, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadFloat(ULong, Integer)
  name.vb: ReadFloat(ULong, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ExtractFloat(System.UInt64,System.Int32@)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ExtractFloat(System.UInt64,System.Int32@)
  id: ExtractFloat(System.UInt64,System.Int32@)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt
  langs:
  - csharp
  - vb
  name: ExtractFloat(ulong, ref int)
  nameWithType: PrimitiveSerializeExt.ExtractFloat(ulong, ref int)
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ExtractFloat(ulong, ref int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ExtractFloat
    path: ../source/client/source/Framework/Bitpacking/PrimitiveSerializeExt.cs
    startLine: 1146
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: >-
      [Obsolete("Use Read instead.")]

      public static float ExtractFloat(this ulong buffer, ref int bitposition)
    parameters:
    - id: buffer
      type: System.UInt64
    - id: bitposition
      type: System.Int32
    return:
      type: System.Single
    content.vb: >-
      <Obsolete("Use Read instead.")>

      Public Shared Function ExtractFloat(buffer As ULong, bitposition As Integer) As Single
  overload: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ExtractFloat*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use Read instead.
  nameWithType.vb: PrimitiveSerializeExt.ExtractFloat(ULong, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ExtractFloat(ULong, Integer)
  name.vb: ExtractFloat(ULong, Integer)
references:
- uid: BlockEngine.Client.Framework.Bitpacking
  commentId: N:BlockEngine.Client.Framework.Bitpacking
  href: BlockEngine.html
  name: BlockEngine.Client.Framework.Bitpacking
  nameWithType: BlockEngine.Client.Framework.Bitpacking
  fullName: BlockEngine.Client.Framework.Bitpacking
  spec.csharp:
  - uid: BlockEngine
    name: BlockEngine
    href: BlockEngine.html
  - name: .
  - uid: BlockEngine.Client
    name: Client
    href: BlockEngine.Client.html
  - name: .
  - uid: BlockEngine.Client.Framework
    name: Framework
    href: BlockEngine.Client.Framework.html
  - name: .
  - uid: BlockEngine.Client.Framework.Bitpacking
    name: Bitpacking
    href: BlockEngine.Client.Framework.Bitpacking.html
  spec.vb:
  - uid: BlockEngine
    name: BlockEngine
    href: BlockEngine.html
  - name: .
  - uid: BlockEngine.Client
    name: Client
    href: BlockEngine.Client.html
  - name: .
  - uid: BlockEngine.Client.Framework
    name: Framework
    href: BlockEngine.Client.Framework.html
  - name: .
  - uid: BlockEngine.Client.Framework.Bitpacking
    name: Bitpacking
    href: BlockEngine.Client.Framework.Bitpacking.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject
  href: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.html#BlockEngine_Client_Framework_Bitpacking_PrimitiveSerializeExt_Inject_BlockEngine_Client_Framework_Bitpacking_ByteConverter_System_UInt64__System_Int32__System_Int32_
  name: Inject
  nameWithType: PrimitiveSerializeExt.Inject
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Inject
- uid: BlockEngine.Client.Framework.Bitpacking.ByteConverter
  commentId: T:BlockEngine.Client.Framework.Bitpacking.ByteConverter
  parent: BlockEngine.Client.Framework.Bitpacking
  href: BlockEngine.Client.Framework.Bitpacking.ByteConverter.html
  name: ByteConverter
  nameWithType: ByteConverter
  fullName: BlockEngine.Client.Framework.Bitpacking.ByteConverter
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint16
  name: ushort
  nameWithType: ushort
  fullName: ushort
  nameWithType.vb: UShort
  fullName.vb: UShort
  name.vb: UShort
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned
  href: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.html#BlockEngine_Client_Framework_Bitpacking_PrimitiveSerializeExt_WriteSigned_System_UInt64_System_Int32_System_Int32__System_Int32_
  name: WriteSigned
  nameWithType: PrimitiveSerializeExt.WriteSigned
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WriteSigned
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned
  href: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.html#BlockEngine_Client_Framework_Bitpacking_PrimitiveSerializeExt_InjectSigned_System_Int64_System_UInt64__System_Int32__System_Int32_
  name: InjectSigned
  nameWithType: PrimitiveSerializeExt.InjectSigned
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectSigned
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int16
  name: short
  nameWithType: short
  fullName: short
  nameWithType.vb: Short
  fullName.vb: Short
  name.vb: Short
- uid: System.SByte
  commentId: T:System.SByte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.sbyte
  name: sbyte
  nameWithType: sbyte
  fullName: sbyte
  nameWithType.vb: SByte
  fullName.vb: SByte
  name.vb: SByte
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned
  href: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.html#BlockEngine_Client_Framework_Bitpacking_PrimitiveSerializeExt_ReadSigned_System_UInt64_System_Int32__System_Int32_
  name: ReadSigned
  nameWithType: PrimitiveSerializeExt.ReadSigned
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadSigned
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool
  href: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.html#BlockEngine_Client_Framework_Bitpacking_PrimitiveSerializeExt_WritetBool_System_UInt64_System_Boolean_System_Int32__
  name: WritetBool
  nameWithType: PrimitiveSerializeExt.WritetBool
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.WritetBool
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool
  href: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.html#BlockEngine_Client_Framework_Bitpacking_PrimitiveSerializeExt_ReadBool_System_UInt64_System_Int32__
  name: ReadBool
  nameWithType: PrimitiveSerializeExt.ReadBool
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadBool
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadtBool*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadtBool
  href: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.html#BlockEngine_Client_Framework_Bitpacking_PrimitiveSerializeExt_ReadtBool_System_UInt32_System_Int32__
  name: ReadtBool
  nameWithType: PrimitiveSerializeExt.ReadtBool
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadtBool
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write
  href: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.html#BlockEngine_Client_Framework_Bitpacking_PrimitiveSerializeExt_Write_System_UInt64_System_UInt64_System_Int32__System_Int32_
  name: Write
  nameWithType: PrimitiveSerializeExt.Write
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Write
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned
  href: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.html#BlockEngine_Client_Framework_Bitpacking_PrimitiveSerializeExt_InjectUnsigned_System_Int64_System_UInt64__System_Int32__System_Int32_
  name: InjectUnsigned
  nameWithType: PrimitiveSerializeExt.InjectUnsigned
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.InjectUnsigned
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract
  href: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.html#BlockEngine_Client_Framework_Bitpacking_PrimitiveSerializeExt_Extract_System_UInt64_System_Int32_System_Int32__
  name: Extract
  nameWithType: PrimitiveSerializeExt.Extract
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Extract
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read
  href: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.html#BlockEngine_Client_Framework_Bitpacking_PrimitiveSerializeExt_Read_System_UInt64_System_Int32__System_Int32_
  name: Read
  nameWithType: PrimitiveSerializeExt.Read
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.Read
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadFloat*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadFloat
  href: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.html#BlockEngine_Client_Framework_Bitpacking_PrimitiveSerializeExt_ReadFloat_System_UInt64_System_Int32__
  name: ReadFloat
  nameWithType: PrimitiveSerializeExt.ReadFloat
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ReadFloat
- uid: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ExtractFloat*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ExtractFloat
  href: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.html#BlockEngine_Client_Framework_Bitpacking_PrimitiveSerializeExt_ExtractFloat_System_UInt64_System_Int32__
  name: ExtractFloat
  nameWithType: PrimitiveSerializeExt.ExtractFloat
  fullName: BlockEngine.Client.Framework.Bitpacking.PrimitiveSerializeExt.ExtractFloat
