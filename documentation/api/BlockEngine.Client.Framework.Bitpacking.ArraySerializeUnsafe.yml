### YamlMime:ManagedReference
items:
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  commentId: T:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  id: ArraySerializeUnsafe
  parent: BlockEngine.Client.Framework.Bitpacking
  children:
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(System.Byte,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(System.UInt16,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(System.UInt32,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(System.UInt64,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(System.Int16,System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(System.Int32,System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(System.SByte,System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(System.Int32,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(System.Int64,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(System.SByte,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Append(System.UInt64*,System.UInt64,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AppendSigned(System.UInt64*,System.Int32,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(System.Byte,System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(System.UInt16,System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(System.UInt32,System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(System.UInt64,System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(System.Int16,System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(System.Int32,System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(System.SByte,System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int32,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int32,System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int64,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int64,System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.SByte,System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PeekSigned(System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(System.Byte,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(System.UInt16,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(System.UInt32,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(System.UInt64,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(System.Int32,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(System.SByte,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned(System.SByte,System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read(System.UInt64*,System.Int32,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read(System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.Byte[],System.Int32,System.Byte[],System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.Byte[],System.Int32,System.UInt32[],System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.Byte[],System.Int32,System.UInt64[],System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt32[],System.Int32,System.Byte[],System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt32[],System.Int32,System.UInt32[],System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt32[],System.Int32,System.UInt64[],System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt64*,System.Int32,System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt64[],System.Int32,System.Byte[],System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt64[],System.Int32,System.UInt32[],System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt64[],System.Int32,System.UInt64[],System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadSigned(System.UInt64*,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Write(System.UInt64*,System.UInt64,System.Int32@,System.Int32)
  - BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.WriteSigned(System.UInt64*,System.Int32,System.Int32@,System.Int32)
  langs:
  - csharp
  - vb
  name: ArraySerializeUnsafe
  nameWithType: ArraySerializeUnsafe
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  type: Class
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ArraySerializeUnsafe
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 27
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  syntax:
    content: public static class ArraySerializeUnsafe
    content.vb: Public Module ArraySerializeUnsafe
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.WriteSigned(System.UInt64*,System.Int32,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.WriteSigned(System.UInt64*,System.Int32,System.Int32@,System.Int32)
  id: WriteSigned(System.UInt64*,System.Int32,System.Int32@,System.Int32)
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: WriteSigned(ulong*, int, ref int, int)
  nameWithType: ArraySerializeUnsafe.WriteSigned(ulong*, int, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.WriteSigned(ulong*, int, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: WriteSigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 38
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Writes value to this unsafe buffer. Uses zigzag encoding to retain the sign value.

    Existing data past this inject is preserved.
  example: []
  syntax:
    content: public static void WriteSigned(ulong* buffer, int value, ref int bitposition, int bits)
    parameters:
    - id: buffer
      type: System.UInt64*
    - id: value
      type: System.Int32
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub WriteSigned(buffer As ULong*, value As Integer, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.WriteSigned*
  nameWithType.vb: ArraySerializeUnsafe.WriteSigned(ULong*, Integer, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.WriteSigned(ULong*, Integer, Integer, Integer)
  name.vb: WriteSigned(ULong*, Integer, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AppendSigned(System.UInt64*,System.Int32,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AppendSigned(System.UInt64*,System.Int32,System.Int32@,System.Int32)
  id: AppendSigned(System.UInt64*,System.Int32,System.Int32@,System.Int32)
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: AppendSigned(ulong*, int, ref int, int)
  nameWithType: ArraySerializeUnsafe.AppendSigned(ulong*, int, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AppendSigned(ulong*, int, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: AppendSigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 49
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Appends value to this unsafe buffer. Uses zigzag encoding to retain the sign value.

    Existing data past this inject is NOT preserved. Only use for sequential writes.

    Use Write() or Inject() for non-linear writes.
  example: []
  syntax:
    content: public static void AppendSigned(ulong* buffer, int value, ref int bitposition, int bits)
    parameters:
    - id: buffer
      type: System.UInt64*
    - id: value
      type: System.Int32
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub AppendSigned(buffer As ULong*, value As Integer, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AppendSigned*
  nameWithType.vb: ArraySerializeUnsafe.AppendSigned(ULong*, Integer, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AppendSigned(ULong*, Integer, Integer, Integer)
  name.vb: AppendSigned(ULong*, Integer, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(System.Int32,System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(System.Int32,System.UInt64*,System.Int32@,System.Int32)
  id: AddSigned(System.Int32,System.UInt64*,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: AddSigned(int, ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.AddSigned(int, ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(int, ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: AddSigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 59
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Appends this value to the unsafe buffer. Uses zigzag encoding to retain the sign value.

    Existing data past this inject is NOT preserved in exchange for a faster write.
  example: []
  syntax:
    content: public static void AddSigned(this int value, ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int32
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub AddSigned(value As Integer, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned*
  nameWithType.vb: ArraySerializeUnsafe.AddSigned(Integer, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(Integer, ULong*, Integer, Integer)
  name.vb: AddSigned(Integer, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(System.Int16,System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(System.Int16,System.UInt64*,System.Int32@,System.Int32)
  id: AddSigned(System.Int16,System.UInt64*,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: AddSigned(short, ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.AddSigned(short, ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(short, ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: AddSigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 68
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Appends this value to the unsafe buffer. Uses zigzag encoding to retain the sign value.

    Existing data past this inject is NOT preserved in exchange for a faster write.
  example: []
  syntax:
    content: public static void AddSigned(this short value, ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int16
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub AddSigned(value As Short, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned*
  nameWithType.vb: ArraySerializeUnsafe.AddSigned(Short, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(Short, ULong*, Integer, Integer)
  name.vb: AddSigned(Short, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(System.SByte,System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(System.SByte,System.UInt64*,System.Int32@,System.Int32)
  id: AddSigned(System.SByte,System.UInt64*,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: AddSigned(sbyte, ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.AddSigned(sbyte, ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(sbyte, ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: AddSigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 77
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Appends this value to the unsafe buffer. Uses zigzag encoding to retain the sign value.

    Existing data past this inject is NOT preserved in exchange for a faster write.
  example: []
  syntax:
    content: public static void AddSigned(this sbyte value, ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.SByte
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub AddSigned(value As SByte, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned*
  nameWithType.vb: ArraySerializeUnsafe.AddSigned(SByte, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned(SByte, ULong*, Integer, Integer)
  name.vb: AddSigned(SByte, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(System.Int32,System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(System.Int32,System.UInt64*,System.Int32@,System.Int32)
  id: InjectSigned(System.Int32,System.UInt64*,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: InjectSigned(int, ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.InjectSigned(int, ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(int, ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 88
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Overwrites this value to the unsafe buffer. Uses zigzag encoding to retain the sign value. 

    Existing data past this inject is preserved.
  example: []
  syntax:
    content: public static void InjectSigned(this int value, ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int32
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As Integer, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned*
  nameWithType.vb: ArraySerializeUnsafe.InjectSigned(Integer, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(Integer, ULong*, Integer, Integer)
  name.vb: InjectSigned(Integer, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(System.Int16,System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(System.Int16,System.UInt64*,System.Int32@,System.Int32)
  id: InjectSigned(System.Int16,System.UInt64*,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: InjectSigned(short, ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.InjectSigned(short, ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(short, ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 97
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Overwrites this value to the unsafe buffer. Uses zigzag encoding to retain the sign value. 

    Existing data past this inject is preserved.
  example: []
  syntax:
    content: public static void InjectSigned(this short value, ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int16
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As Short, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned*
  nameWithType.vb: ArraySerializeUnsafe.InjectSigned(Short, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(Short, ULong*, Integer, Integer)
  name.vb: InjectSigned(Short, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(System.SByte,System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(System.SByte,System.UInt64*,System.Int32@,System.Int32)
  id: InjectSigned(System.SByte,System.UInt64*,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: InjectSigned(sbyte, ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.InjectSigned(sbyte, ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(sbyte, ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectSigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 106
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Overwrites this value to the unsafe buffer. Uses zigzag encoding to retain the sign value. 

    Existing data past this inject is preserved.
  example: []
  syntax:
    content: public static void InjectSigned(this sbyte value, ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.SByte
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectSigned(value As SByte, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned*
  nameWithType.vb: ArraySerializeUnsafe.InjectSigned(SByte, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned(SByte, ULong*, Integer, Integer)
  name.vb: InjectSigned(SByte, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(System.Int32,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(System.Int32,System.UInt64*,System.Int32,System.Int32)
  id: PokeSigned(System.Int32,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: PokeSigned(int, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.PokeSigned(int, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(int, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: PokeSigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 118
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Overwrites this value to the unsafe buffer. Uses zigzag encoding to retain the sign value.

    Unlike Inject, this does not increment the bitposition and is for one-off injections.

    Existing data past this inject is preserved.
  example: []
  syntax:
    content: public static void PokeSigned(this int value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int32
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub PokeSigned(value As Integer, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned*
  nameWithType.vb: ArraySerializeUnsafe.PokeSigned(Integer, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(Integer, ULong*, Integer, Integer)
  name.vb: PokeSigned(Integer, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  id: PokeSigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: PokeSigned(short, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.PokeSigned(short, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(short, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: PokeSigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 128
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Overwrites this value to the unsafe buffer. Uses zigzag encoding to retain the sign value.

    Unlike Inject, this does not increment the bitposition and is for one-off injections.

    Existing data past this inject is preserved.
  example: []
  syntax:
    content: public static void PokeSigned(this short value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int16
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub PokeSigned(value As Short, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned*
  nameWithType.vb: ArraySerializeUnsafe.PokeSigned(Short, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(Short, ULong*, Integer, Integer)
  name.vb: PokeSigned(Short, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(System.SByte,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(System.SByte,System.UInt64*,System.Int32,System.Int32)
  id: PokeSigned(System.SByte,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: PokeSigned(sbyte, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.PokeSigned(sbyte, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(sbyte, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: PokeSigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 138
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Overwrites this value to the unsafe buffer. Uses zigzag encoding to retain the sign value.

    Unlike Inject, this does not increment the bitposition and is for one-off injections.

    Existing data past this inject is preserved.
  example: []
  syntax:
    content: public static void PokeSigned(this sbyte value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.SByte
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub PokeSigned(value As SByte, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned*
  nameWithType.vb: ArraySerializeUnsafe.PokeSigned(SByte, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned(SByte, ULong*, Integer, Integer)
  name.vb: PokeSigned(SByte, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadSigned(System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadSigned(System.UInt64*,System.Int32@,System.Int32)
  id: ReadSigned(System.UInt64*,System.Int32@,System.Int32)
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: ReadSigned(ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.ReadSigned(ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadSigned(ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadSigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 148
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Returns signed value read from the buffer.
  example: []
  syntax:
    content: public static int ReadSigned(ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Shared Function ReadSigned(uPtr As ULong*, bitposition As Integer, bits As Integer) As Integer
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadSigned*
  nameWithType.vb: ArraySerializeUnsafe.ReadSigned(ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadSigned(ULong*, Integer, Integer)
  name.vb: ReadSigned(ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PeekSigned(System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PeekSigned(System.UInt64*,System.Int32,System.Int32)
  id: PeekSigned(System.UInt64*,System.Int32,System.Int32)
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: PeekSigned(ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.PeekSigned(ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PeekSigned(ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: PeekSigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 159
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: Returns signed value read from the buffer. Same as Read, only the bitposition is not incremented.
  example: []
  syntax:
    content: public static int PeekSigned(ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Shared Function PeekSigned(uPtr As ULong*, bitposition As Integer, bits As Integer) As Integer
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PeekSigned*
  nameWithType.vb: ArraySerializeUnsafe.PeekSigned(ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PeekSigned(ULong*, Integer, Integer)
  name.vb: PeekSigned(ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Append(System.UInt64*,System.UInt64,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Append(System.UInt64*,System.UInt64,System.Int32@,System.Int32)
  id: Append(System.UInt64*,System.UInt64,System.Int32@,System.Int32)
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Append(ulong*, ulong, ref int, int)
  nameWithType: ArraySerializeUnsafe.Append(ulong*, ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Append(ulong*, ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Append
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 177
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Primary Append writer. Faster method for writing to byte[] or uint[] buffers. Uses unsafe to treat them as ulong[].

    Append does not preserve existing buffer data past the write point in exchange for a faster write.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void Append(ulong* uPtr, ulong value, ref int bitposition, int bits)
    parameters:
    - id: uPtr
      type: System.UInt64*
      description: Cast your byte* or uint* to ulong*
    - id: value
      type: System.UInt64
      description: ''
    - id: bitposition
      type: System.Int32
      description: ''
    - id: bits
      type: System.Int32
      description: ''
    content.vb: Public Shared Sub Append(uPtr As ULong*, value As ULong, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Append*
  nameWithType.vb: ArraySerializeUnsafe.Append(ULong*, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Append(ULong*, ULong, Integer, Integer)
  name.vb: Append(ULong*, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Write(System.UInt64*,System.UInt64,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Write(System.UInt64*,System.UInt64,System.Int32@,System.Int32)
  id: Write(System.UInt64*,System.UInt64,System.Int32@,System.Int32)
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Write(ulong*, ulong, ref int, int)
  nameWithType: ArraySerializeUnsafe.Write(ulong*, ulong, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Write(ulong*, ulong, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Write
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 232
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Primary Unsafe writer. Faster method for writing to byte[] or uint[] buffers. Uses unsafe to treat them as ulong[].

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void Write(ulong* uPtr, ulong value, ref int bitposition, int bits)
    parameters:
    - id: uPtr
      type: System.UInt64*
      description: Cast your byte* or uint* to ulong*
    - id: value
      type: System.UInt64
      description: ''
    - id: bitposition
      type: System.Int32
      description: ''
    - id: bits
      type: System.Int32
      description: ''
    content.vb: Public Shared Sub Write(uPtr As ULong*, value As ULong, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Write*
  nameWithType.vb: ArraySerializeUnsafe.Write(ULong*, ULong, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Write(ULong*, ULong, Integer, Integer)
  name.vb: Write(ULong*, ULong, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read(System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read(System.UInt64*,System.Int32@,System.Int32)
  id: Read(System.UInt64*,System.Int32@,System.Int32)
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Read(ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.Read(ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read(ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Read
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 270
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Primary Unsafe Read. Fast read for byte[] and unit[] by treating them as ulong[].

    WARNING: There is no bounds checking on this method!
  example: []
  syntax:
    content: public static ulong Read(ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: uPtr
      type: System.UInt64*
      description: Cast your byte* or uint* to ulong*
    - id: bitposition
      type: System.Int32
      description: ''
    - id: bits
      type: System.Int32
      description: ''
    return:
      type: System.UInt64
      description: Returns the read value.
    content.vb: Public Shared Function Read(uPtr As ULong*, bitposition As Integer, bits As Integer) As ULong
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read*
  nameWithType.vb: ArraySerializeUnsafe.Read(ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read(ULong*, Integer, Integer)
  name.vb: Read(ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read(System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read(System.UInt64*,System.Int32,System.Int32)
  id: Read(System.UInt64*,System.Int32,System.Int32)
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Read(ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.Read(ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read(ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Read
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 304
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Primary Unsafe Peek. Fast read for byte[] and unit[] by treating them as ulong[].

    Reads value at position without incrementing the bitposition.

    WARNING: There is no bounds checking on this method!
  example: []
  syntax:
    content: public static ulong Read(ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: uPtr
      type: System.UInt64*
      description: Cast your byte* or uint* to ulong*
    - id: bitposition
      type: System.Int32
      description: ''
    - id: bits
      type: System.Int32
      description: ''
    return:
      type: System.UInt64
      description: Returns the read value.
    content.vb: Public Shared Function Read(uPtr As ULong*, bitposition As Integer, bits As Integer) As ULong
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read*
  nameWithType.vb: ArraySerializeUnsafe.Read(ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read(ULong*, Integer, Integer)
  name.vb: Read(ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(System.UInt64,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(System.UInt64,System.UInt64*,System.Int32,System.Int32)
  id: Add(System.UInt64,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Add(ulong, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.Add(ulong, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(ulong, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Add
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 336
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Append this value to the unsafe uPtr array. Use for altering previous writes. Does not preserve existing data past the write.

    Use for sequential writes only.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void Add(this ulong value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt64
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub Add(value As ULong, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add*
  nameWithType.vb: ArraySerializeUnsafe.Add(ULong, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(ULong, ULong*, Integer, Integer)
  name.vb: Add(ULong, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(System.UInt32,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(System.UInt32,System.UInt64*,System.Int32,System.Int32)
  id: Add(System.UInt32,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Add(uint, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.Add(uint, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(uint, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Add
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 345
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Append this value to the unsafe uPtr array. Use for altering previous writes. Does not preserve existing data past the write.

    Use for sequential writes only.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void Add(this uint value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt32
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub Add(value As UInteger, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add*
  nameWithType.vb: ArraySerializeUnsafe.Add(UInteger, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(UInteger, ULong*, Integer, Integer)
  name.vb: Add(UInteger, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(System.UInt16,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(System.UInt16,System.UInt64*,System.Int32,System.Int32)
  id: Add(System.UInt16,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Add(ushort, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.Add(ushort, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(ushort, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Add
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 354
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Append this value to the unsafe uPtr array. Use for altering previous writes. Does not preserve existing data past the write.

    Use for sequential writes only.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void Add(this ushort value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt16
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub Add(value As UShort, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add*
  nameWithType.vb: ArraySerializeUnsafe.Add(UShort, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(UShort, ULong*, Integer, Integer)
  name.vb: Add(UShort, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(System.Byte,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(System.Byte,System.UInt64*,System.Int32,System.Int32)
  id: Add(System.Byte,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Add(byte, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.Add(byte, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(byte, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Add
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 363
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Append this value to the unsafe uPtr array. Use for altering previous writes. Does not preserve existing data past the write.

    Use for sequential writes only.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void Add(this byte value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.Byte
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub Add(value As Byte, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add*
  nameWithType.vb: ArraySerializeUnsafe.Add(Byte, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add(Byte, ULong*, Integer, Integer)
  name.vb: Add(Byte, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(System.Int64,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(System.Int64,System.UInt64*,System.Int32,System.Int32)
  id: AddUnsigned(System.Int64,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: AddUnsigned(long, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.AddUnsigned(long, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(long, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: AddUnsigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 373
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Append this value to the unsafe uPtr array. Use for altering previous writes. Does not preserve existing data past the write.

    Use for sequential writes only. Sign is ignored and value is cast to ulong.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void AddUnsigned(this long value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int64
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub AddUnsigned(value As Long, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned*
  nameWithType.vb: ArraySerializeUnsafe.AddUnsigned(Long, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(Long, ULong*, Integer, Integer)
  name.vb: AddUnsigned(Long, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(System.Int32,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(System.Int32,System.UInt64*,System.Int32,System.Int32)
  id: AddUnsigned(System.Int32,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: AddUnsigned(int, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.AddUnsigned(int, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(int, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: AddUnsigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 382
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Append this value to the unsafe uPtr array. Use for altering previous writes. Does not preserve existing data past the write.

    Use for sequential writes only. Sign is ignored and value is cast to ulong.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void AddUnsigned(this int value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int32
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub AddUnsigned(value As Integer, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned*
  nameWithType.vb: ArraySerializeUnsafe.AddUnsigned(Integer, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(Integer, ULong*, Integer, Integer)
  name.vb: AddUnsigned(Integer, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  id: AddUnsigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: AddUnsigned(short, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.AddUnsigned(short, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(short, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: AddUnsigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 391
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Append this value to the unsafe uPtr array. Use for altering previous writes. Does not preserve existing data past the write.

    Use for sequential writes only. Sign is ignored and value is cast to ulong.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void AddUnsigned(this short value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int16
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub AddUnsigned(value As Short, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned*
  nameWithType.vb: ArraySerializeUnsafe.AddUnsigned(Short, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(Short, ULong*, Integer, Integer)
  name.vb: AddUnsigned(Short, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(System.SByte,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(System.SByte,System.UInt64*,System.Int32,System.Int32)
  id: AddUnsigned(System.SByte,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: AddUnsigned(sbyte, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.AddUnsigned(sbyte, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(sbyte, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: AddUnsigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 400
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Append this value to the unsafe uPtr array. Use for altering previous writes. Does not preserve existing data past the write.

    Use for sequential writes only. Sign is ignored and value is cast to ulong.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void AddUnsigned(this sbyte value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.SByte
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub AddUnsigned(value As SByte, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned*
  nameWithType.vb: ArraySerializeUnsafe.AddUnsigned(SByte, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned(SByte, ULong*, Integer, Integer)
  name.vb: AddUnsigned(SByte, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(System.UInt64,System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(System.UInt64,System.UInt64*,System.Int32@,System.Int32)
  id: Inject(System.UInt64,System.UInt64*,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Inject(ulong, ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.Inject(ulong, ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(ulong, ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 413
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void Inject(this ulong value, ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt64
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub Inject(value As ULong, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject*
  nameWithType.vb: ArraySerializeUnsafe.Inject(ULong, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(ULong, ULong*, Integer, Integer)
  name.vb: Inject(ULong, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(System.UInt32,System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(System.UInt32,System.UInt64*,System.Int32@,System.Int32)
  id: Inject(System.UInt32,System.UInt64*,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Inject(uint, ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.Inject(uint, ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(uint, ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 421
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void Inject(this uint value, ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt32
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub Inject(value As UInteger, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject*
  nameWithType.vb: ArraySerializeUnsafe.Inject(UInteger, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(UInteger, ULong*, Integer, Integer)
  name.vb: Inject(UInteger, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(System.UInt16,System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(System.UInt16,System.UInt64*,System.Int32@,System.Int32)
  id: Inject(System.UInt16,System.UInt64*,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Inject(ushort, ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.Inject(ushort, ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(ushort, ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 429
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void Inject(this ushort value, ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt16
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub Inject(value As UShort, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject*
  nameWithType.vb: ArraySerializeUnsafe.Inject(UShort, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(UShort, ULong*, Integer, Integer)
  name.vb: Inject(UShort, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(System.Byte,System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(System.Byte,System.UInt64*,System.Int32@,System.Int32)
  id: Inject(System.Byte,System.UInt64*,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Inject(byte, ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.Inject(byte, ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(byte, ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Inject
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 437
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void Inject(this byte value, ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Byte
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub Inject(value As Byte, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject*
  nameWithType.vb: ArraySerializeUnsafe.Inject(Byte, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject(Byte, ULong*, Integer, Integer)
  name.vb: Inject(Byte, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int64,System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int64,System.UInt64*,System.Int32@,System.Int32)
  id: InjectUnsigned(System.Int64,System.UInt64*,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: InjectUnsigned(long, ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.InjectUnsigned(long, ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(long, ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectUnsigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 446
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    Sign is ignored and value is cast to ulong.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void InjectUnsigned(this long value, ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int64
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectUnsigned(value As Long, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned*
  nameWithType.vb: ArraySerializeUnsafe.InjectUnsigned(Long, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(Long, ULong*, Integer, Integer)
  name.vb: InjectUnsigned(Long, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int32,System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int32,System.UInt64*,System.Int32@,System.Int32)
  id: InjectUnsigned(System.Int32,System.UInt64*,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: InjectUnsigned(int, ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.InjectUnsigned(int, ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(int, ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectUnsigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 455
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    Sign is ignored and value is cast to ulong.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void InjectUnsigned(this int value, ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int32
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectUnsigned(value As Integer, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned*
  nameWithType.vb: ArraySerializeUnsafe.InjectUnsigned(Integer, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(Integer, ULong*, Integer, Integer)
  name.vb: InjectUnsigned(Integer, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  id: InjectUnsigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: InjectUnsigned(short, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.InjectUnsigned(short, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(short, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectUnsigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 464
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    Sign is ignored and value is cast to ulong.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void InjectUnsigned(this short value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int16
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectUnsigned(value As Short, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned*
  nameWithType.vb: ArraySerializeUnsafe.InjectUnsigned(Short, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(Short, ULong*, Integer, Integer)
  name.vb: InjectUnsigned(Short, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.SByte,System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.SByte,System.UInt64*,System.Int32@,System.Int32)
  id: InjectUnsigned(System.SByte,System.UInt64*,System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: InjectUnsigned(sbyte, ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.InjectUnsigned(sbyte, ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(sbyte, ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectUnsigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 473
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    Sign is ignored and value is cast to ulong.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void InjectUnsigned(this sbyte value, ulong* uPtr, ref int bitposition, int bits)
    parameters:
    - id: value
      type: System.SByte
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectUnsigned(value As SByte, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned*
  nameWithType.vb: ArraySerializeUnsafe.InjectUnsigned(SByte, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(SByte, ULong*, Integer, Integer)
  name.vb: InjectUnsigned(SByte, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(System.UInt64,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(System.UInt64,System.UInt64*,System.Int32,System.Int32)
  id: Poke(System.UInt64,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Poke(ulong, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.Poke(ulong, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(ulong, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Poke
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 487
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    Same as Inject, only the bitposition is not a ref and is not incremented.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void Poke(this ulong value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt64
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub Poke(value As ULong, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke*
  nameWithType.vb: ArraySerializeUnsafe.Poke(ULong, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(ULong, ULong*, Integer, Integer)
  name.vb: Poke(ULong, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(System.UInt32,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(System.UInt32,System.UInt64*,System.Int32,System.Int32)
  id: Poke(System.UInt32,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Poke(uint, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.Poke(uint, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(uint, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Poke
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 496
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    Same as Inject, only the bitposition is not a ref and is not incremented.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void Poke(this uint value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt32
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub Poke(value As UInteger, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke*
  nameWithType.vb: ArraySerializeUnsafe.Poke(UInteger, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(UInteger, ULong*, Integer, Integer)
  name.vb: Poke(UInteger, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(System.UInt16,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(System.UInt16,System.UInt64*,System.Int32,System.Int32)
  id: Poke(System.UInt16,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Poke(ushort, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.Poke(ushort, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(ushort, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Poke
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 505
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    Same as Inject, only the bitposition is not a ref and is not incremented.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void Poke(this ushort value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.UInt16
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub Poke(value As UShort, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke*
  nameWithType.vb: ArraySerializeUnsafe.Poke(UShort, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(UShort, ULong*, Integer, Integer)
  name.vb: Poke(UShort, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(System.Byte,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(System.Byte,System.UInt64*,System.Int32,System.Int32)
  id: Poke(System.Byte,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: Poke(byte, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.Poke(byte, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(byte, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: Poke
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 513
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void Poke(this byte value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.Byte
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub Poke(value As Byte, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke*
  nameWithType.vb: ArraySerializeUnsafe.Poke(Byte, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke(Byte, ULong*, Integer, Integer)
  name.vb: Poke(Byte, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int64,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int64,System.UInt64*,System.Int32,System.Int32)
  id: InjectUnsigned(System.Int64,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: InjectUnsigned(long, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.InjectUnsigned(long, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(long, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectUnsigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 523
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    Sign is ignored and value is cast to ulong.

    Same as Inject, only the bitposition is not a ref and is not incremented.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void InjectUnsigned(this long value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int64
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectUnsigned(value As Long, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned*
  nameWithType.vb: ArraySerializeUnsafe.InjectUnsigned(Long, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(Long, ULong*, Integer, Integer)
  name.vb: InjectUnsigned(Long, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int32,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(System.Int32,System.UInt64*,System.Int32,System.Int32)
  id: InjectUnsigned(System.Int32,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: InjectUnsigned(int, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.InjectUnsigned(int, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(int, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: InjectUnsigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 533
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    Sign is ignored and value is cast to ulong.

    Same as Inject, only the bitposition is not a ref and is not incremented.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void InjectUnsigned(this int value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int32
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub InjectUnsigned(value As Integer, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned*
  nameWithType.vb: ArraySerializeUnsafe.InjectUnsigned(Integer, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned(Integer, ULong*, Integer, Integer)
  name.vb: InjectUnsigned(Integer, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  id: PokeUnsigned(System.Int16,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: PokeUnsigned(short, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.PokeUnsigned(short, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned(short, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: PokeUnsigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 543
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    Sign is ignored and value is cast to ulong.

    Same as Inject, only the bitposition is not a ref and is not incremented.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void PokeUnsigned(this short value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.Int16
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub PokeUnsigned(value As Short, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned*
  nameWithType.vb: ArraySerializeUnsafe.PokeUnsigned(Short, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned(Short, ULong*, Integer, Integer)
  name.vb: PokeUnsigned(Short, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned(System.SByte,System.UInt64*,System.Int32,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned(System.SByte,System.UInt64*,System.Int32,System.Int32)
  id: PokeUnsigned(System.SByte,System.UInt64*,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: PokeUnsigned(sbyte, ulong*, int, int)
  nameWithType: ArraySerializeUnsafe.PokeUnsigned(sbyte, ulong*, int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned(sbyte, ulong*, int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: PokeUnsigned
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 553
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Write this value to the unsafe uPtr array. Use for altering previous writes. Preserves existing data past the write.

    Sign is ignored and value is cast to ulong.

    Same as Inject, only the bitposition is not a ref and is not incremented.

    WARNING: There is no bounds checking on this. If you write too far, you will crash.
  example: []
  syntax:
    content: public static void PokeUnsigned(this sbyte value, ulong* uPtr, int bitposition, int bits)
    parameters:
    - id: value
      type: System.SByte
    - id: uPtr
      type: System.UInt64*
    - id: bitposition
      type: System.Int32
    - id: bits
      type: System.Int32
    content.vb: Public Shared Sub PokeUnsigned(value As SByte, uPtr As ULong*, bitposition As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned*
  nameWithType.vb: ArraySerializeUnsafe.PokeUnsigned(SByte, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned(SByte, ULong*, Integer, Integer)
  name.vb: PokeUnsigned(SByte, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt64*,System.Int32,System.UInt64*,System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt64*,System.Int32,System.UInt64*,System.Int32@,System.Int32)
  id: ReadOutUnsafe(System.UInt64*,System.Int32,System.UInt64*,System.Int32@,System.Int32)
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: ReadOutUnsafe(ulong*, int, ulong*, ref int, int)
  nameWithType: ArraySerializeUnsafe.ReadOutUnsafe(ulong*, int, ulong*, ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(ulong*, int, ulong*, ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadOutUnsafe
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 571
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: 'Primary ReadOutUnsafe method. WARNING: No bounds checking. Use with caution. Cast array pointers to ulong*.'
  example: []
  syntax:
    content: public static void ReadOutUnsafe(ulong* sourcePtr, int sourcePos, ulong* targetPtr, ref int targetPos, int bits)
    parameters:
    - id: sourcePtr
      type: System.UInt64*
      description: ''
    - id: sourcePos
      type: System.Int32
      description: ''
    - id: targetPtr
      type: System.UInt64*
      description: ''
    - id: targetPos
      type: System.Int32
      description: ''
    - id: bits
      type: System.Int32
      description: ''
    content.vb: Public Shared Sub ReadOutUnsafe(sourcePtr As ULong*, sourcePos As Integer, targetPtr As ULong*, targetPos As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe*
  nameWithType.vb: ArraySerializeUnsafe.ReadOutUnsafe(ULong*, Integer, ULong*, Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(ULong*, Integer, ULong*, Integer, Integer)
  name.vb: ReadOutUnsafe(ULong*, Integer, ULong*, Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt64[],System.Int32,System.Byte[],System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt64[],System.Int32,System.Byte[],System.Int32@,System.Int32)
  id: ReadOutUnsafe(System.UInt64[],System.Int32,System.Byte[],System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: ReadOutUnsafe(ulong[], int, byte[], ref int, int)
  nameWithType: ArraySerializeUnsafe.ReadOutUnsafe(ulong[], int, byte[], ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(ulong[], int, byte[], ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadOutUnsafe
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 600
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Read the contents of one bitpacked array to another using Unsafe. This generally requires arrays to have a total byte count divisible by 8,

    as they will be treated as ulong[] in unsafe.
  example: []
  syntax:
    content: public static void ReadOutUnsafe(this ulong[] source, int sourcePos, byte[] target, ref int targetPos, int bits)
    parameters:
    - id: source
      type: System.UInt64[]
      description: ''
    - id: sourcePos
      type: System.Int32
      description: Bitpos of the source array to start read from.
    - id: target
      type: System.Byte[]
      description: ''
    - id: targetPos
      type: System.Int32
      description: The target bitposition (that will be incremented with this write).
    - id: bits
      type: System.Int32
      description: Number of bits to copy. This should be the current bitpos of the source.
    content.vb: Public Shared Sub ReadOutUnsafe(source As ULong(), sourcePos As Integer, target As Byte(), targetPos As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe*
  nameWithType.vb: ArraySerializeUnsafe.ReadOutUnsafe(ULong(), Integer, Byte(), Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(ULong(), Integer, Byte(), Integer, Integer)
  name.vb: ReadOutUnsafe(ULong(), Integer, Byte(), Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt64[],System.Int32,System.UInt32[],System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt64[],System.Int32,System.UInt32[],System.Int32@,System.Int32)
  id: ReadOutUnsafe(System.UInt64[],System.Int32,System.UInt32[],System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: ReadOutUnsafe(ulong[], int, uint[], ref int, int)
  nameWithType: ArraySerializeUnsafe.ReadOutUnsafe(ulong[], int, uint[], ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(ulong[], int, uint[], ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadOutUnsafe
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 637
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Read the contents of one bitpacked array to another using Unsafe. This generally requires arrays to have a total byte count divisible by 8,

    as they will be treated as ulong[] in unsafe.
  example: []
  syntax:
    content: public static void ReadOutUnsafe(this ulong[] source, int sourcePos, uint[] target, ref int targetPos, int bits)
    parameters:
    - id: source
      type: System.UInt64[]
      description: ''
    - id: sourcePos
      type: System.Int32
      description: Bitpos of the source array to start read from.
    - id: target
      type: System.UInt32[]
      description: ''
    - id: targetPos
      type: System.Int32
      description: The target bitposition (that will be incremented with this write).
    - id: bits
      type: System.Int32
      description: Number of bits to copy. This should be the current bitpos of the source.
    content.vb: Public Shared Sub ReadOutUnsafe(source As ULong(), sourcePos As Integer, target As UInteger(), targetPos As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe*
  nameWithType.vb: ArraySerializeUnsafe.ReadOutUnsafe(ULong(), Integer, UInteger(), Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(ULong(), Integer, UInteger(), Integer, Integer)
  name.vb: ReadOutUnsafe(ULong(), Integer, UInteger(), Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt64[],System.Int32,System.UInt64[],System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt64[],System.Int32,System.UInt64[],System.Int32@,System.Int32)
  id: ReadOutUnsafe(System.UInt64[],System.Int32,System.UInt64[],System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: ReadOutUnsafe(ulong[], int, ulong[], ref int, int)
  nameWithType: ArraySerializeUnsafe.ReadOutUnsafe(ulong[], int, ulong[], ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(ulong[], int, ulong[], ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadOutUnsafe
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 673
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Read the contents of one bitpacked array to another using Unsafe. This generally requires arrays to have a total byte count divisible by 8,

    as they will be treated as ulong[] in unsafe.
  example: []
  syntax:
    content: public static void ReadOutUnsafe(this ulong[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)
    parameters:
    - id: source
      type: System.UInt64[]
      description: ''
    - id: sourcePos
      type: System.Int32
      description: Bitpos of the source array to start read from.
    - id: target
      type: System.UInt64[]
      description: ''
    - id: targetPos
      type: System.Int32
      description: The target bitposition (that will be incremented with this write).
    - id: bits
      type: System.Int32
      description: Number of bits to copy. This should be the current bitpos of the source.
    content.vb: Public Shared Sub ReadOutUnsafe(source As ULong(), sourcePos As Integer, target As ULong(), targetPos As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe*
  nameWithType.vb: ArraySerializeUnsafe.ReadOutUnsafe(ULong(), Integer, ULong(), Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(ULong(), Integer, ULong(), Integer, Integer)
  name.vb: ReadOutUnsafe(ULong(), Integer, ULong(), Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt32[],System.Int32,System.Byte[],System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt32[],System.Int32,System.Byte[],System.Int32@,System.Int32)
  id: ReadOutUnsafe(System.UInt32[],System.Int32,System.Byte[],System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: ReadOutUnsafe(uint[], int, byte[], ref int, int)
  nameWithType: ArraySerializeUnsafe.ReadOutUnsafe(uint[], int, byte[], ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(uint[], int, byte[], ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadOutUnsafe
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 712
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Read the contents of one bitpacked array to another using Unsafe. This generally requires arrays to have a total byte count divisible by 8,

    as they will be treated as ulong[] in unsafe.
  example: []
  syntax:
    content: public static void ReadOutUnsafe(this uint[] source, int sourcePos, byte[] target, ref int targetPos, int bits)
    parameters:
    - id: source
      type: System.UInt32[]
      description: ''
    - id: sourcePos
      type: System.Int32
      description: Bitpos of the source array to start read from.
    - id: target
      type: System.Byte[]
      description: ''
    - id: targetPos
      type: System.Int32
      description: The target bitposition (that will be incremented with this write).
    - id: bits
      type: System.Int32
      description: Number of bits to copy. This should be the current bitpos of the source.
    content.vb: Public Shared Sub ReadOutUnsafe(source As UInteger(), sourcePos As Integer, target As Byte(), targetPos As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe*
  nameWithType.vb: ArraySerializeUnsafe.ReadOutUnsafe(UInteger(), Integer, Byte(), Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(UInteger(), Integer, Byte(), Integer, Integer)
  name.vb: ReadOutUnsafe(UInteger(), Integer, Byte(), Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt32[],System.Int32,System.UInt32[],System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt32[],System.Int32,System.UInt32[],System.Int32@,System.Int32)
  id: ReadOutUnsafe(System.UInt32[],System.Int32,System.UInt32[],System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: ReadOutUnsafe(uint[], int, uint[], ref int, int)
  nameWithType: ArraySerializeUnsafe.ReadOutUnsafe(uint[], int, uint[], ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(uint[], int, uint[], ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadOutUnsafe
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 749
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Read the contents of one bitpacked array to another using Unsafe. This generally requires arrays to have a total byte count divisible by 8,

    as they will be treated as ulong[] in unsafe.
  example: []
  syntax:
    content: public static void ReadOutUnsafe(this uint[] source, int sourcePos, uint[] target, ref int targetPos, int bits)
    parameters:
    - id: source
      type: System.UInt32[]
      description: ''
    - id: sourcePos
      type: System.Int32
      description: Bitpos of the source array to start read from.
    - id: target
      type: System.UInt32[]
      description: ''
    - id: targetPos
      type: System.Int32
      description: The target bitposition (that will be incremented with this write).
    - id: bits
      type: System.Int32
      description: Number of bits to copy. This should be the current bitpos of the source.
    content.vb: Public Shared Sub ReadOutUnsafe(source As UInteger(), sourcePos As Integer, target As UInteger(), targetPos As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe*
  nameWithType.vb: ArraySerializeUnsafe.ReadOutUnsafe(UInteger(), Integer, UInteger(), Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(UInteger(), Integer, UInteger(), Integer, Integer)
  name.vb: ReadOutUnsafe(UInteger(), Integer, UInteger(), Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt32[],System.Int32,System.UInt64[],System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.UInt32[],System.Int32,System.UInt64[],System.Int32@,System.Int32)
  id: ReadOutUnsafe(System.UInt32[],System.Int32,System.UInt64[],System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: ReadOutUnsafe(uint[], int, ulong[], ref int, int)
  nameWithType: ArraySerializeUnsafe.ReadOutUnsafe(uint[], int, ulong[], ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(uint[], int, ulong[], ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadOutUnsafe
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 787
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Read the contents of one bitpacked array to another using Unsafe. This generally requires arrays to have a total byte count divisible by 8,

    as they will be treated as ulong[] in unsafe.
  example: []
  syntax:
    content: public static void ReadOutUnsafe(this uint[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)
    parameters:
    - id: source
      type: System.UInt32[]
      description: ''
    - id: sourcePos
      type: System.Int32
      description: Bitpos of the source array to start read from.
    - id: target
      type: System.UInt64[]
      description: ''
    - id: targetPos
      type: System.Int32
      description: The target bitposition (that will be incremented with this write).
    - id: bits
      type: System.Int32
      description: Number of bits to copy. This should be the current bitpos of the source.
    content.vb: Public Shared Sub ReadOutUnsafe(source As UInteger(), sourcePos As Integer, target As ULong(), targetPos As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe*
  nameWithType.vb: ArraySerializeUnsafe.ReadOutUnsafe(UInteger(), Integer, ULong(), Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(UInteger(), Integer, ULong(), Integer, Integer)
  name.vb: ReadOutUnsafe(UInteger(), Integer, ULong(), Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.Byte[],System.Int32,System.UInt64[],System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.Byte[],System.Int32,System.UInt64[],System.Int32@,System.Int32)
  id: ReadOutUnsafe(System.Byte[],System.Int32,System.UInt64[],System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: ReadOutUnsafe(byte[], int, ulong[], ref int, int)
  nameWithType: ArraySerializeUnsafe.ReadOutUnsafe(byte[], int, ulong[], ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(byte[], int, ulong[], ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadOutUnsafe
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 828
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Read the contents of one bitpacked array to another using Unsafe. This generally requires arrays to have a total byte count divisible by 8,

    as they will be treated as ulong[] in unsafe.
  example: []
  syntax:
    content: public static void ReadOutUnsafe(this byte[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: sourcePos
      type: System.Int32
      description: Bitpos of the source array to start read from.
    - id: target
      type: System.UInt64[]
      description: ''
    - id: targetPos
      type: System.Int32
      description: The target bitposition (that will be incremented with this write).
    - id: bits
      type: System.Int32
      description: Number of bits to copy. This should be the current bitpos of the source.
    content.vb: Public Shared Sub ReadOutUnsafe(source As Byte(), sourcePos As Integer, target As ULong(), targetPos As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe*
  nameWithType.vb: ArraySerializeUnsafe.ReadOutUnsafe(Byte(), Integer, ULong(), Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(Byte(), Integer, ULong(), Integer, Integer)
  name.vb: ReadOutUnsafe(Byte(), Integer, ULong(), Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.Byte[],System.Int32,System.UInt32[],System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.Byte[],System.Int32,System.UInt32[],System.Int32@,System.Int32)
  id: ReadOutUnsafe(System.Byte[],System.Int32,System.UInt32[],System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: ReadOutUnsafe(byte[], int, uint[], ref int, int)
  nameWithType: ArraySerializeUnsafe.ReadOutUnsafe(byte[], int, uint[], ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(byte[], int, uint[], ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadOutUnsafe
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 865
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Read the contents of one bitpacked array to another using Unsafe. This generally requires arrays to have a total byte count divisible by 8,

    as they will be treated as ulong[] in unsafe.
  example: []
  syntax:
    content: public static void ReadOutUnsafe(this byte[] source, int sourcePos, uint[] target, ref int targetPos, int bits)
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: sourcePos
      type: System.Int32
      description: Bitpos of the source array to start read from.
    - id: target
      type: System.UInt32[]
      description: ''
    - id: targetPos
      type: System.Int32
      description: The target bitposition (that will be incremented with this write).
    - id: bits
      type: System.Int32
      description: Number of bits to copy. This should be the current bitpos of the source.
    content.vb: Public Shared Sub ReadOutUnsafe(source As Byte(), sourcePos As Integer, target As UInteger(), targetPos As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe*
  nameWithType.vb: ArraySerializeUnsafe.ReadOutUnsafe(Byte(), Integer, UInteger(), Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(Byte(), Integer, UInteger(), Integer, Integer)
  name.vb: ReadOutUnsafe(Byte(), Integer, UInteger(), Integer, Integer)
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.Byte[],System.Int32,System.Byte[],System.Int32@,System.Int32)
  commentId: M:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(System.Byte[],System.Int32,System.Byte[],System.Int32@,System.Int32)
  id: ReadOutUnsafe(System.Byte[],System.Int32,System.Byte[],System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe
  langs:
  - csharp
  - vb
  name: ReadOutUnsafe(byte[], int, byte[], ref int, int)
  nameWithType: ArraySerializeUnsafe.ReadOutUnsafe(byte[], int, byte[], ref int, int)
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(byte[], int, byte[], ref int, int)
  type: Method
  source:
    remote:
      path: source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
      branch: dev
      repo: https://github.com/japsuu/BlockEngine.git
    id: ReadOutUnsafe
    path: ../source/client/source/Framework/Bitpacking/ArraySerializeUnsafe.cs
    startLine: 902
  assemblies:
  - Client
  namespace: BlockEngine.Client.Framework.Bitpacking
  summary: >-
    Read the contents of one bitpacked array to another using Unsafe. This generally requires arrays to have a total byte count divisible by 8,

    as they will be treated as ulong[] in unsafe.
  example: []
  syntax:
    content: public static void ReadOutUnsafe(this byte[] source, int sourcePos, byte[] target, ref int targetPos, int bits)
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: sourcePos
      type: System.Int32
      description: Bitpos of the source array to start read from.
    - id: target
      type: System.Byte[]
      description: ''
    - id: targetPos
      type: System.Int32
      description: The target bitposition (that will be incremented with this write).
    - id: bits
      type: System.Int32
      description: Number of bits to copy. This should be the current bitpos of the source.
    content.vb: Public Shared Sub ReadOutUnsafe(source As Byte(), sourcePos As Integer, target As Byte(), targetPos As Integer, bits As Integer)
  overload: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe*
  nameWithType.vb: ArraySerializeUnsafe.ReadOutUnsafe(Byte(), Integer, Byte(), Integer, Integer)
  fullName.vb: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe(Byte(), Integer, Byte(), Integer, Integer)
  name.vb: ReadOutUnsafe(Byte(), Integer, Byte(), Integer, Integer)
references:
- uid: BlockEngine.Client.Framework.Bitpacking
  commentId: N:BlockEngine.Client.Framework.Bitpacking
  href: BlockEngine.html
  name: BlockEngine.Client.Framework.Bitpacking
  nameWithType: BlockEngine.Client.Framework.Bitpacking
  fullName: BlockEngine.Client.Framework.Bitpacking
  spec.csharp:
  - uid: BlockEngine
    name: BlockEngine
    href: BlockEngine.html
  - name: .
  - uid: BlockEngine.Client
    name: Client
    href: BlockEngine.Client.html
  - name: .
  - uid: BlockEngine.Client.Framework
    name: Framework
    href: BlockEngine.Client.Framework.html
  - name: .
  - uid: BlockEngine.Client.Framework.Bitpacking
    name: Bitpacking
    href: BlockEngine.Client.Framework.Bitpacking.html
  spec.vb:
  - uid: BlockEngine
    name: BlockEngine
    href: BlockEngine.html
  - name: .
  - uid: BlockEngine.Client
    name: Client
    href: BlockEngine.Client.html
  - name: .
  - uid: BlockEngine.Client.Framework
    name: Framework
    href: BlockEngine.Client.Framework.html
  - name: .
  - uid: BlockEngine.Client.Framework.Bitpacking
    name: Bitpacking
    href: BlockEngine.Client.Framework.Bitpacking.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.WriteSigned*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.WriteSigned
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_WriteSigned_System_UInt64__System_Int32_System_Int32__System_Int32_
  name: WriteSigned
  nameWithType: ArraySerializeUnsafe.WriteSigned
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.WriteSigned
- uid: System.UInt64*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong*
  nameWithType: ulong*
  fullName: ulong*
  nameWithType.vb: ULong*
  fullName.vb: ULong*
  name.vb: ULong*
  spec.csharp:
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: '*'
  spec.vb:
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: '*'
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AppendSigned*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AppendSigned
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_AppendSigned_System_UInt64__System_Int32_System_Int32__System_Int32_
  name: AppendSigned
  nameWithType: ArraySerializeUnsafe.AppendSigned
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AppendSigned
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_AddSigned_System_Int32_System_UInt64__System_Int32__System_Int32_
  name: AddSigned
  nameWithType: ArraySerializeUnsafe.AddSigned
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddSigned
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int16
  name: short
  nameWithType: short
  fullName: short
  nameWithType.vb: Short
  fullName.vb: Short
  name.vb: Short
- uid: System.SByte
  commentId: T:System.SByte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.sbyte
  name: sbyte
  nameWithType: sbyte
  fullName: sbyte
  nameWithType.vb: SByte
  fullName.vb: SByte
  name.vb: SByte
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_InjectSigned_System_Int32_System_UInt64__System_Int32__System_Int32_
  name: InjectSigned
  nameWithType: ArraySerializeUnsafe.InjectSigned
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectSigned
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_PokeSigned_System_Int32_System_UInt64__System_Int32_System_Int32_
  name: PokeSigned
  nameWithType: ArraySerializeUnsafe.PokeSigned
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeSigned
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadSigned*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadSigned
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_ReadSigned_System_UInt64__System_Int32__System_Int32_
  name: ReadSigned
  nameWithType: ArraySerializeUnsafe.ReadSigned
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadSigned
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PeekSigned*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PeekSigned
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_PeekSigned_System_UInt64__System_Int32_System_Int32_
  name: PeekSigned
  nameWithType: ArraySerializeUnsafe.PeekSigned
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PeekSigned
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Append*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Append
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_Append_System_UInt64__System_UInt64_System_Int32__System_Int32_
  name: Append
  nameWithType: ArraySerializeUnsafe.Append
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Append
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Write*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Write
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_Write_System_UInt64__System_UInt64_System_Int32__System_Int32_
  name: Write
  nameWithType: ArraySerializeUnsafe.Write
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Write
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_Read_System_UInt64__System_Int32__System_Int32_
  name: Read
  nameWithType: ArraySerializeUnsafe.Read
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Read
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_Add_System_UInt64_System_UInt64__System_Int32_System_Int32_
  name: Add
  nameWithType: ArraySerializeUnsafe.Add
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Add
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint16
  name: ushort
  nameWithType: ushort
  fullName: ushort
  nameWithType.vb: UShort
  fullName.vb: UShort
  name.vb: UShort
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_AddUnsigned_System_Int64_System_UInt64__System_Int32_System_Int32_
  name: AddUnsigned
  nameWithType: ArraySerializeUnsafe.AddUnsigned
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.AddUnsigned
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_Inject_System_UInt64_System_UInt64__System_Int32__System_Int32_
  name: Inject
  nameWithType: ArraySerializeUnsafe.Inject
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Inject
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_InjectUnsigned_System_Int64_System_UInt64__System_Int32__System_Int32_
  name: InjectUnsigned
  nameWithType: ArraySerializeUnsafe.InjectUnsigned
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.InjectUnsigned
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_Poke_System_UInt64_System_UInt64__System_Int32_System_Int32_
  name: Poke
  nameWithType: ArraySerializeUnsafe.Poke
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.Poke
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_PokeUnsigned_System_Int16_System_UInt64__System_Int32_System_Int32_
  name: PokeUnsigned
  nameWithType: ArraySerializeUnsafe.PokeUnsigned
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.PokeUnsigned
- uid: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe*
  commentId: Overload:BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe
  href: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.html#BlockEngine_Client_Framework_Bitpacking_ArraySerializeUnsafe_ReadOutUnsafe_System_UInt64__System_Int32_System_UInt64__System_Int32__System_Int32_
  name: ReadOutUnsafe
  nameWithType: ArraySerializeUnsafe.ReadOutUnsafe
  fullName: BlockEngine.Client.Framework.Bitpacking.ArraySerializeUnsafe.ReadOutUnsafe
- uid: System.UInt64[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong[]
  nameWithType: ulong[]
  fullName: ulong[]
  nameWithType.vb: ULong()
  fullName.vb: ULong()
  name.vb: ULong()
  spec.csharp:
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: (
  - name: )
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: System.UInt32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint[]
  nameWithType: uint[]
  fullName: uint[]
  nameWithType.vb: UInteger()
  fullName.vb: UInteger()
  name.vb: UInteger()
  spec.csharp:
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: (
  - name: )
